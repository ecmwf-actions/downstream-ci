name: downstream-ci-hpc
'on':
  workflow_call:
    inputs:
      atlas:
        required: false
        type: string
      cfgrib:
        required: false
        type: string
      earthkit-data:
        required: false
        type: string
      eccodes:
        required: false
        type: string
      eccodes-python:
        required: false
        type: string
      ecflow:
        required: false
        type: string
      ecflow-light:
        required: false
        type: string
      eckit:
        required: false
        type: string
      fckit:
        required: false
        type: string
      fdb:
        required: false
        type: string
      metkit:
        required: false
        type: string
      mir:
        required: false
        type: string
      multiurl:
        required: false
        type: string
      odc:
        required: false
        type: string
      pdbufr:
        required: false
        type: string
      plume:
        required: false
        type: string
      pyfdb:
        required: false
        type: string
      pyodc:
        required: false
        type: string
      skinnywms:
        required: false
        type: string
      thermofeel:
        required: false
        type: string
      skip_matrix_jobs:
        description: List of matrix jobs to be skipped.
        required: false
        type: string
jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      atlas: ${{ steps.setup.outputs.atlas }}
      cfgrib: ${{ steps.setup.outputs.cfgrib }}
      earthkit-data: ${{ steps.setup.outputs.earthkit-data }}
      eccodes: ${{ steps.setup.outputs.eccodes }}
      eccodes-python: ${{ steps.setup.outputs.eccodes-python }}
      ecflow: ${{ steps.setup.outputs.ecflow }}
      ecflow-light: ${{ steps.setup.outputs.ecflow-light }}
      eckit: ${{ steps.setup.outputs.eckit }}
      fckit: ${{ steps.setup.outputs.fckit }}
      fdb: ${{ steps.setup.outputs.fdb }}
      metkit: ${{ steps.setup.outputs.metkit }}
      mir: ${{ steps.setup.outputs.mir }}
      multiurl: ${{ steps.setup.outputs.multiurl }}
      odc: ${{ steps.setup.outputs.odc }}
      pdbufr: ${{ steps.setup.outputs.pdbufr }}
      plume: ${{ steps.setup.outputs.plume }}
      pyfdb: ${{ steps.setup.outputs.pyfdb }}
      pyodc: ${{ steps.setup.outputs.pyodc }}
      skinnywms: ${{ steps.setup.outputs.skinnywms }}
      thermofeel: ${{ steps.setup.outputs.thermofeel }}
      dep_tree: ${{ steps.setup.outputs.build_package_hpc_dep_tree }}
    steps:
    - name: checkout reusable wfs repo
      uses: actions/checkout@v4
      with:
        repository: ecmwf-actions/downstream-ci
        ref: main
    - name: Run setup script
      id: setup
      env:
        TOKEN: ${{ secrets.GH_REPO_READ_TOKEN }}
        CONFIG: |
          ecmwf/atlas:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.atlas }}
            optional_matrix: null
          ecmwf/cfgrib:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: master
            input: ${{ inputs.cfgrib }}
            optional_matrix: null
          ecmwf/earthkit-data:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ inputs.earthkit-data }}
            optional_matrix: null
          ecmwf/eccodes:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.eccodes }}
            optional_matrix: null
          ecmwf/eccodes-python:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.eccodes-python }}
            optional_matrix: null
          ecmwf/ecflow:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.ecflow }}
            optional_matrix: null
          ecmwf/ecflow-light:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.ecflow-light }}
            optional_matrix: null
          ecmwf/eckit:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.eckit }}
            optional_matrix: null
          ecmwf/fckit:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.fckit }}
            optional_matrix: null
          ecmwf/fdb:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.fdb }}
            optional_matrix: null
          ecmwf/metkit:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.metkit }}
            optional_matrix: null
          ecmwf/mir:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.mir }}
            optional_matrix: null
          ecmwf/multiurl:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: main
            input: ${{ inputs.multiurl }}
            optional_matrix: null
          ecmwf/odc:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.odc }}
            optional_matrix: null
          ecmwf/pdbufr:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: master
            input: ${{ inputs.pdbufr }}
            optional_matrix: null
          ecmwf/plume:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.plume }}
            optional_matrix: null
          ecmwf/pyfdb:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.pyfdb }}
            optional_matrix: null
          ecmwf/pyodc:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.pyodc }}
            optional_matrix: null
          ecmwf/skinnywms:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.skinnywms }}
            optional_matrix: null
          ecmwf/thermofeel:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.thermofeel }}
            optional_matrix: null
        SKIP_MATRIX_JOBS: ${{ inputs.skip_matrix_jobs }}
        PYTHON_VERSIONS: |+
          - '3.10'

        PYTHON_JOBS: |+
          - gnu-8.5.0

        MATRIX: |
          include:
          - compiler: gnu-12.2.0
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            compiler_modules: gcc/12.2.0
            name: gnu-12.2.0
            site: atos
          - compiler: gnu-8.5.0
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            compiler_modules: gcc/8.5.0
            name: gnu-8.5.0
            site: atos
          - compiler: nvidia-22.11
            compiler_cc: nvc
            compiler_cxx: nvc++
            compiler_fc: nvfortran
            compiler_modules: prgenv/nvidia,nvidia/22.11
            name: nvidia-22.11
            site: atos
          - compiler: intel-2021.4.0
            compiler_cc: icc
            compiler_cxx: icpc
            compiler_fc: ifort
            compiler_modules: prgenv/intel,intel/2021.4.0
            name: intel-2021.4.0
            site: atos
          name:
          - gnu-12.2.0
          - gnu-8.5.0
          - nvidia-22.11
          - intel-2021.4.0
        OPTIONAL_MATRIX: |
          include:
          - compiler: gnu-12.2.0
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            compiler_modules: LUMI/23.09,cpeGNU/23.09
            name: lumi-gnu-12.2.0
            site: lumi
          name:
          - lumi
      run: python setup_downstream_ci.py
  atlas:
    name: atlas
    needs:
    - fckit
    - eckit
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.atlas && (inputs.fckit || inputs.eckit || inputs.atlas) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.atlas) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ inputs.fckit }}
          ${{ inputs.eckit }}
        python_dependencies: ''
  cfgrib:
    name: cfgrib
    needs:
    - eccodes-python
    - eccodes
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.cfgrib && (inputs.eccodes-python || inputs.eccodes || inputs.cfgrib) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.cfgrib) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ${{ inputs.eccodes }}
        python_dependencies: ${{ inputs.eccodes-python }}
  earthkit-data:
    name: earthkit-data
    needs:
    - cfgrib
    - multiurl
    - pdbufr
    - eccodes-python
    - eccodes
    - pyodc
    - odc
    - eckit
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-data && (inputs.cfgrib || inputs.multiurl || inputs.pdbufr || inputs.eccodes-python || inputs.eccodes || inputs.pyodc || inputs.odc || inputs.eckit || inputs.earthkit-data) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-data) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ inputs.eccodes }}
          ${{ inputs.odc }}
          ${{ inputs.eckit }}
        python_dependencies: |-
          ${{ inputs.cfgrib }}
          ${{ inputs.multiurl }}
          ${{ inputs.pdbufr }}
          ${{ inputs.eccodes-python }}
          ${{ inputs.pyodc }}
  eccodes:
    name: eccodes
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eccodes && (inputs.eccodes) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  eccodes-python:
    name: eccodes-python
    needs:
    - eccodes
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eccodes-python && (inputs.eccodes || inputs.eccodes-python) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes-python) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ${{ inputs.eccodes }}
        python_dependencies: ''
  ecflow:
    name: ecflow
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.ecflow && (inputs.ecflow) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  ecflow-light:
    name: ecflow-light
    needs:
    - eckit
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.ecflow-light && (inputs.eckit || inputs.ecflow-light) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow-light) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ${{ inputs.eckit }}
        python_dependencies: ''
  eckit:
    name: eckit
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eckit && (inputs.eckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eckit) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  fckit:
    name: fckit
    needs:
    - eckit
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fckit && (inputs.eckit || inputs.fckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fckit) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ${{ inputs.eckit }}
        python_dependencies: ''
  fdb:
    name: fdb
    needs:
    - metkit
    - eccodes
    - eckit
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fdb && (inputs.metkit || inputs.eccodes || inputs.eckit || inputs.fdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fdb) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ inputs.metkit }}
          ${{ inputs.eccodes }}
          ${{ inputs.eckit }}
        python_dependencies: ''
  metkit:
    name: metkit
    needs:
    - eccodes
    - eckit
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.metkit && (inputs.eccodes || inputs.eckit || inputs.metkit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.metkit) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ inputs.eccodes }}
          ${{ inputs.eckit }}
        python_dependencies: ''
  mir:
    name: mir
    needs:
    - atlas
    - fckit
    - eckit
    - eccodes
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.mir && (inputs.atlas || inputs.fckit || inputs.eckit || inputs.eccodes || inputs.mir) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.mir) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ inputs.atlas }}
          ${{ inputs.fckit }}
          ${{ inputs.eckit }}
          ${{ inputs.eccodes }}
        python_dependencies: ''
  multiurl:
    name: multiurl
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.multiurl && (inputs.multiurl) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.multiurl) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  odc:
    name: odc
    needs:
    - eckit
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.odc && (inputs.eckit || inputs.odc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.odc) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ${{ inputs.eckit }}
        python_dependencies: ''
  pdbufr:
    name: pdbufr
    needs:
    - eccodes-python
    - eccodes
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pdbufr && (inputs.eccodes-python || inputs.eccodes || inputs.pdbufr) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pdbufr) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ${{ inputs.eccodes }}
        python_dependencies: ${{ inputs.eccodes-python }}
  plume:
    name: plume
    needs:
    - atlas
    - fckit
    - eckit
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.plume && (inputs.atlas || inputs.fckit || inputs.eckit || inputs.plume) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.plume) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ inputs.atlas }}
          ${{ inputs.fckit }}
          ${{ inputs.eckit }}
        python_dependencies: ''
  pyfdb:
    name: pyfdb
    needs:
    - fdb
    - metkit
    - eccodes
    - eckit
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyfdb && (inputs.fdb || inputs.metkit || inputs.eccodes || inputs.eckit || inputs.pyfdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyfdb) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ inputs.fdb }}
          ${{ inputs.metkit }}
          ${{ inputs.eccodes }}
          ${{ inputs.eckit }}
        python_dependencies: ''
  pyodc:
    name: pyodc
    needs:
    - odc
    - eckit
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyodc && (inputs.odc || inputs.eckit || inputs.pyodc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyodc) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ inputs.odc }}
          ${{ inputs.eckit }}
        python_dependencies: ''
  skinnywms:
    name: skinnywms
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.skinnywms && (inputs.skinnywms) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.skinnywms) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  thermofeel:
    name: thermofeel
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.thermofeel && (inputs.thermofeel) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.thermofeel) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''

name: downstream ci hpc

on:
  workflow_call:
    inputs:
      dev_runner:
        description: Whether to use runner with dev version of build-package-hpc .
        required: false
        type: boolean
      skip_matrix_jobs:
        description: List of matrix jobs to be skipped.
        required: false
        type: string
      eccodes:
        required: false
        type: string
      eccodes-python:
        required: false
        type: string
      eckit:
        required: false
        type: string
      odc:
        required: false
        type: string
      pyodc:
        required: false
        type: string
      metkit:
        required: false
        type: string
      fdb:
        required: false
        type: string
      pyfdb:
        required: false
        type: string
      atlas:
        required: false
        type: string
      fckit:
        required: false
        type: string
      plume:
        required: false
        type: string
      mir:
        required: false
        type: string
      skinnywms:
        required: false
        type: string
      ecflow:
        required: false
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      eccodes: ${{ steps.setup.outputs.eccodes }}
      eccodes-python: ${{ steps.setup.outputs.eccodes-python }}
      eckit: ${{ steps.setup.outputs.eckit }}
      odc: ${{ steps.setup.outputs.odc }}
      pyodc: ${{ steps.setup.outputs.pyodc }}
      metkit: ${{ steps.setup.outputs.metkit }}
      fdb: ${{ steps.setup.outputs.fdb }}
      pyfdb: ${{ steps.setup.outputs.pyfdb }}
      atlas: ${{ steps.setup.outputs.atlas }}
      fckit: ${{ steps.setup.outputs.fckit }}
      plume: ${{ steps.setup.outputs.plume }}
      mir: ${{ steps.setup.outputs.mir }}
      skinnywms: ${{ steps.setup.outputs.skinnywms }}
      dep_tree: ${{ steps.setup.outputs.build_package_hpc_dep_tree }}
      ecflow: ${{ steps.setup.outputs.ecflow }}
    steps:
      - name: checkout reusable wfs repo
        uses: actions/checkout@v3
        with:
          repository: 'ecmwf-actions/downstream-ci'
          ref: 'main'

      - name: Run setup script
        id: setup
        env:
          TOKEN: ${{ secrets.GH_REPO_READ_TOKEN }}
          CONFIG: |
            ${{ inputs.eccodes || 'ecmwf/eccodes@develop' }}:
              path: .github/ci-hpc-config.yml
            ${{ inputs.eccodes-python || 'ecmwf/eccodes-python@develop' }}:
              path: .github/ci-hpc-config.yml
              python: true
            ${{ inputs.eckit || 'ecmwf/eckit@develop' }}:
              path: .github/ci-hpc-config.yml
            ${{ inputs.odc || 'ecmwf/odc@develop' }}:
              path: .github/ci-hpc-config.yml
            ${{ inputs.pyodc || 'ecmwf/pyodc@develop' }}:
              path: .github/ci-hpc-config.yml
              python: true
            ${{ inputs.metkit || 'ecmwf/metkit@develop' }}:
              path: .github/ci-hpc-config.yml
            ${{ inputs.fdb || 'ecmwf/fdb@develop' }}:
              path: .github/ci-hpc-config.yml
            ${{ inputs.pyfdb || 'ecmwf/pyfdb@develop' }}:
              path: .github/ci-hpc-config.yml
              python: true
            ${{ inputs.atlas || 'ecmwf/atlas@develop' }}:
              path: .github/ci-hpc-config.yml
            ${{ inputs.fckit || 'ecmwf/fckit@develop' }}:
              path: .github/ci-hpc-config.yml
            ${{ inputs.plume || 'ecmwf/plume@develop' }}:
              path: .github/ci-hpc-config.yml
            ${{ inputs.mir || 'ecmwf/mir@develop' }}:
              path: .github/ci-hpc-config.yml
            ${{ inputs.skinnywms || 'ecmwf/skinnywms@develop' }}:
              path: .github/ci-hpc-config.yml
              python: true
            ${{ inputs.ecflow || 'ecmwf/ecflow@develop' }}:
              path: .github/ci-hpc-config.yml
          SKIP_MATRIX_JOBS: |
            gnu-10.3.0
            ${{ inputs.skip_matrix_jobs }}
          PYTHON_VERSIONS: |
            - "3.10"
          PYTHON_JOBS: |
            - gnu-8.5.0
          MATRIX: |
            name:
            - gnu-12.2.0
            - gnu-8.5.0
            - gnu-10.3.0
            - nvidia-22.11
            - intel-2021.4.0
            include:
            - name: gnu-12.2.0
              compiler: gnu-12.2.0
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
              compiler_modules: gcc/12.2.0
            - name: gnu-8.5.0
              compiler: gnu-8.5.0
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
              compiler_modules: gcc/8.5.0
            - name: gnu-10.3.0
              compiler: gnu-10.3.0
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
              compiler_modules: gcc/10.3.0
            - name: nvidia-22.11
              compiler: nvidia-22.11
              compiler_cc: nvc
              compiler_cxx: nvc++
              compiler_fc: nvfortran
              compiler_modules: prgenv/nvidia,nvidia/22.11
            - name: intel-2021.4.0
              compiler: intel-2021.4.0
              compiler_cc: icc
              compiler_cxx: icpc
              compiler_fc: ifort
              compiler_modules: prgenv/intel,intel/2021.4.0
        run: python setup_downstream_ci.py

  eccodes:
    name: eccodes
    needs: [setup]
    if: ${{ inputs.eccodes && needs.setup.outputs.eccodes }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.eccodes || 'ecmwf/eccodes@develop' }}
          build_config: .github/ci-hpc-config.yml

  eccodes-python:
    name: eccodes-python
    needs: [setup, eccodes]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eccodes-python && (inputs.eccodes || inputs.eccodes-python) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes-python) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.eccodes-python || 'ecmwf/eccodes-python@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eccodes }}

  eckit:
    name: eckit
    needs: [setup]
    if: ${{ inputs.eckit && needs.setup.outputs.eckit }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eckit) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.eckit || 'ecmwf/eckit@develop' }}
          build_config: .github/ci-hpc-config.yml

  odc:
    name: odc
    needs: [setup, eckit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.odc && (inputs.eckit || inputs.odc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.odc) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.odc || 'ecmwf/odc@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}

  pyodc:
    name: pyodc
    needs: [setup, eckit, odc]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyodc && (inputs.eckit || inputs.odc || inputs.pyodc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyodc) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.pyodc || 'ecmwf/pyodc@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.odc}}

  metkit:
    name: metkit
    needs: [setup, eckit, eccodes]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.metkit && (inputs.eckit || inputs.eccodes || inputs.metkit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.metkit) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.metkit || 'ecmwf/metkit@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.eccodes }}

  fdb:
    name: fdb
    needs: [setup, eckit, eccodes, metkit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fdb && (inputs.eckit || inputs.eccodes || inputs.metkit || inputs.fdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fdb) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.fdb || 'ecmwf/fdb@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.eccodes }}
            ${{ inputs.metkit }}

  pyfdb:
    name: pyfdb
    needs: [setup, eckit, eccodes, metkit, fdb]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyfdb && (inputs.eckit || inputs.eccodes || inputs.metkit || inputs.fdb || inputs.pyfdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyfdb) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.pyfdb || 'ecmwf/pyfdb@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.eccodes }}
            ${{ inputs.metkit }}
            ${{ inputs.fdb }}

  atlas:
    name: atlas
    needs: [setup, eckit, fckit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.atlas && (inputs.eckit || inputs.atlas || inputs.fckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.atlas) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.atlas || 'ecmwf/atlas@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.fckit }}

  fckit:
    name: fckit
    needs: [setup, eckit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fckit && (inputs.eckit || inputs.fckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fckit) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.fckit || 'ecmwf/fckit@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}

  plume:
    name: plume
    needs: [setup, eckit, fckit, atlas]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.plume && (inputs.eckit || inputs.fckit || inputs.atlas || inputs.plume) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.plume) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.plume || 'ecmwf/plume@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.fckit }}
            ${{ inputs.atlas }}

  mir:
    name: mir
    needs: [setup, eckit, eccodes, atlas]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.mir && (inputs.eckit || inputs.eccodes || inputs.atlas || inputs.mir) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.mir) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.mir || 'ecmwf/mir@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.eccodes }}
            ${{ inputs.atlas }}

  skinnywms:
    name: skinnywms
    needs: [setup]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.skinnywms && inputs.skinnywms }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.skinnywms) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.skinnywms || 'ecmwf/skinnywms@develop' }}
          build_config: .github/ci-hpc-config.yml

  ecflow:
    name: ecflow
    needs: [setup]
    if: ${{ inputs.ecflow && needs.setup.outputs.ecflow }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.ecflow || 'ecmwf/ecflow@develop' }}
          build_config: .github/ci-hpc-config.yml

#
#
#
# This is a file generated by generate-workflows.py - DO NOT EDIT!!
#
#
#
name: downstream-ci-hpc
'on':
  workflow_call:
    inputs:
      atlas:
        required: false
        type: string
      atlas-orca:
        required: false
        type: string
      cfgrib:
        required: false
        type: string
      earthkit:
        required: false
        type: string
      earthkit-data:
        required: false
        type: string
      earthkit-geo:
        required: false
        type: string
      earthkit-meteo:
        required: false
        type: string
      earthkit-regrid:
        required: false
        type: string
      earthkit-time:
        required: false
        type: string
      anemoi-datasets:
        required: false
        type: string
      anemoi-utils:
        required: false
        type: string
      anemoi-transform:
        required: false
        type: string
      anemoi-graphs:
        required: false
        type: string
      anemoi-models:
        required: false
        type: string
      anemoi-training:
        required: false
        type: string
      anemoi-inference:
        required: false
        type: string
      ecbuild:
        required: false
        type: string
      eccodes:
        required: false
        type: string
      eccodes-python:
        required: false
        type: string
      ecflow:
        required: false
        type: string
      ecflow-light:
        required: false
        type: string
      eckit:
        required: false
        type: string
      fckit:
        required: false
        type: string
      fdb:
        required: false
        type: string
      findlibs:
        required: false
        type: string
      gribjump:
        required: false
        type: string
      infero:
        required: false
        type: string
      kronos:
        required: false
        type: string
      metkit:
        required: false
        type: string
      mir:
        required: false
        type: string
      multio:
        required: false
        type: string
      multio-python:
        required: false
        type: string
      multiurl:
        required: false
        type: string
      odc:
        required: false
        type: string
      pdbufr:
        required: false
        type: string
      plume:
        required: false
        type: string
      pyfdb:
        required: false
        type: string
      pyodc:
        required: false
        type: string
      skinnywms:
        required: false
        type: string
      thermofeel:
        required: false
        type: string
      troika:
        required: false
        type: string
      cascade:
        required: false
        type: string
      covjsonkit:
        required: false
        type: string
      danu:
        required: false
        type: string
      skip_matrix_jobs:
        description: List of matrix jobs to be skipped.
        required: false
        type: string
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-downstream-ci-hpc
  cancel-in-progress: true
jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      atlas: ${{ steps.prepare-inputs.outputs.atlas }}
      atlas_matrix: ${{ steps.setup.outputs.atlas }}
      atlas-orca: ${{ steps.prepare-inputs.outputs.atlas-orca }}
      atlas-orca_matrix: ${{ steps.setup.outputs.atlas-orca }}
      cfgrib: ${{ steps.prepare-inputs.outputs.cfgrib }}
      cfgrib_matrix: ${{ steps.setup.outputs.cfgrib }}
      earthkit: ${{ steps.prepare-inputs.outputs.earthkit }}
      earthkit_matrix: ${{ steps.setup.outputs.earthkit }}
      earthkit-data: ${{ steps.prepare-inputs.outputs.earthkit-data }}
      earthkit-data_matrix: ${{ steps.setup.outputs.earthkit-data }}
      earthkit-geo: ${{ steps.prepare-inputs.outputs.earthkit-geo }}
      earthkit-geo_matrix: ${{ steps.setup.outputs.earthkit-geo }}
      earthkit-meteo: ${{ steps.prepare-inputs.outputs.earthkit-meteo }}
      earthkit-meteo_matrix: ${{ steps.setup.outputs.earthkit-meteo }}
      earthkit-regrid: ${{ steps.prepare-inputs.outputs.earthkit-regrid }}
      earthkit-regrid_matrix: ${{ steps.setup.outputs.earthkit-regrid }}
      earthkit-time: ${{ steps.prepare-inputs.outputs.earthkit-time }}
      earthkit-time_matrix: ${{ steps.setup.outputs.earthkit-time }}
      anemoi-datasets: ${{ steps.prepare-inputs.outputs.anemoi-datasets }}
      anemoi-datasets_matrix: ${{ steps.setup.outputs.anemoi-datasets }}
      anemoi-utils: ${{ steps.prepare-inputs.outputs.anemoi-utils }}
      anemoi-utils_matrix: ${{ steps.setup.outputs.anemoi-utils }}
      anemoi-transform: ${{ steps.prepare-inputs.outputs.anemoi-transform }}
      anemoi-transform_matrix: ${{ steps.setup.outputs.anemoi-transform }}
      anemoi-graphs: ${{ steps.prepare-inputs.outputs.anemoi-graphs }}
      anemoi-graphs_matrix: ${{ steps.setup.outputs.anemoi-graphs }}
      anemoi-models: ${{ steps.prepare-inputs.outputs.anemoi-models }}
      anemoi-models_matrix: ${{ steps.setup.outputs.anemoi-models }}
      anemoi-training: ${{ steps.prepare-inputs.outputs.anemoi-training }}
      anemoi-training_matrix: ${{ steps.setup.outputs.anemoi-training }}
      anemoi-inference: ${{ steps.prepare-inputs.outputs.anemoi-inference }}
      anemoi-inference_matrix: ${{ steps.setup.outputs.anemoi-inference }}
      ecbuild: ${{ steps.prepare-inputs.outputs.ecbuild }}
      ecbuild_matrix: ${{ steps.setup.outputs.ecbuild }}
      eccodes: ${{ steps.prepare-inputs.outputs.eccodes }}
      eccodes_matrix: ${{ steps.setup.outputs.eccodes }}
      eccodes-python: ${{ steps.prepare-inputs.outputs.eccodes-python }}
      eccodes-python_matrix: ${{ steps.setup.outputs.eccodes-python }}
      ecflow: ${{ steps.prepare-inputs.outputs.ecflow }}
      ecflow_matrix: ${{ steps.setup.outputs.ecflow }}
      ecflow-light: ${{ steps.prepare-inputs.outputs.ecflow-light }}
      ecflow-light_matrix: ${{ steps.setup.outputs.ecflow-light }}
      eckit: ${{ steps.prepare-inputs.outputs.eckit }}
      eckit_matrix: ${{ steps.setup.outputs.eckit }}
      fckit: ${{ steps.prepare-inputs.outputs.fckit }}
      fckit_matrix: ${{ steps.setup.outputs.fckit }}
      fdb: ${{ steps.prepare-inputs.outputs.fdb }}
      fdb_matrix: ${{ steps.setup.outputs.fdb }}
      findlibs: ${{ steps.prepare-inputs.outputs.findlibs }}
      findlibs_matrix: ${{ steps.setup.outputs.findlibs }}
      gribjump: ${{ steps.prepare-inputs.outputs.gribjump }}
      gribjump_matrix: ${{ steps.setup.outputs.gribjump }}
      infero: ${{ steps.prepare-inputs.outputs.infero }}
      infero_matrix: ${{ steps.setup.outputs.infero }}
      kronos: ${{ steps.prepare-inputs.outputs.kronos }}
      kronos_matrix: ${{ steps.setup.outputs.kronos }}
      metkit: ${{ steps.prepare-inputs.outputs.metkit }}
      metkit_matrix: ${{ steps.setup.outputs.metkit }}
      mir: ${{ steps.prepare-inputs.outputs.mir }}
      mir_matrix: ${{ steps.setup.outputs.mir }}
      multio: ${{ steps.prepare-inputs.outputs.multio }}
      multio_matrix: ${{ steps.setup.outputs.multio }}
      multio-python: ${{ steps.prepare-inputs.outputs.multio-python }}
      multio-python_matrix: ${{ steps.setup.outputs.multio-python }}
      multiurl: ${{ steps.prepare-inputs.outputs.multiurl }}
      multiurl_matrix: ${{ steps.setup.outputs.multiurl }}
      odc: ${{ steps.prepare-inputs.outputs.odc }}
      odc_matrix: ${{ steps.setup.outputs.odc }}
      pdbufr: ${{ steps.prepare-inputs.outputs.pdbufr }}
      pdbufr_matrix: ${{ steps.setup.outputs.pdbufr }}
      plume: ${{ steps.prepare-inputs.outputs.plume }}
      plume_matrix: ${{ steps.setup.outputs.plume }}
      pyfdb: ${{ steps.prepare-inputs.outputs.pyfdb }}
      pyfdb_matrix: ${{ steps.setup.outputs.pyfdb }}
      pyodc: ${{ steps.prepare-inputs.outputs.pyodc }}
      pyodc_matrix: ${{ steps.setup.outputs.pyodc }}
      skinnywms: ${{ steps.prepare-inputs.outputs.skinnywms }}
      skinnywms_matrix: ${{ steps.setup.outputs.skinnywms }}
      thermofeel: ${{ steps.prepare-inputs.outputs.thermofeel }}
      thermofeel_matrix: ${{ steps.setup.outputs.thermofeel }}
      danu: ${{ steps.prepare-inputs.outputs.danu }}
      danu_matrix: ${{ steps.setup.outputs.danu }}
      troika: ${{ steps.prepare-inputs.outputs.troika }}
      troika_matrix: ${{ steps.setup.outputs.troika }}
      cascade: ${{ steps.prepare-inputs.outputs.cascade }}
      cascade_matrix: ${{ steps.setup.outputs.cascade }}
      covjsonkit: ${{ steps.prepare-inputs.outputs.covjsonkit }}
      covjsonkit_matrix: ${{ steps.setup.outputs.covjsonkit }}
      dep_tree: ${{ steps.setup.outputs.build_package_hpc_dep_tree }}
      use_master: ${{ steps.setup.outputs.use_master }}
      danu: ${{ steps.setup.outputs.danu }}
    steps:
    - name: Prepare inputs
      id: prepare-inputs
      run: |-
        echo atlas="${{ inputs.atlas }}" >> $GITHUB_OUTPUT
        echo atlas-orca="${{ inputs.atlas-orca }}" >> $GITHUB_OUTPUT
        echo cfgrib="${{ inputs.cfgrib }}" >> $GITHUB_OUTPUT
        echo earthkit="${{ inputs.earthkit }}" >> $GITHUB_OUTPUT
        echo earthkit-data="${{ inputs.earthkit-data }}" >> $GITHUB_OUTPUT
        echo earthkit-geo="${{ inputs.earthkit-geo }}" >> $GITHUB_OUTPUT
        echo earthkit-meteo="${{ inputs.earthkit-meteo }}" >> $GITHUB_OUTPUT
        echo earthkit-regrid="${{ inputs.earthkit-regrid }}" >> $GITHUB_OUTPUT
        echo earthkit-time="${{ inputs.earthkit-time }}" >> $GITHUB_OUTPUT
        echo anemoi-datasets="${{ inputs.anemoi-datasets }}" >> $GITHUB_OUTPUT
        echo anemoi-utils="${{ inputs.anemoi-utils }}" >> $GITHUB_OUTPUT
        echo anemoi-transform="${{ inputs.anemoi-transform }}" >> $GITHUB_OUTPUT
        echo anemoi-graphs="${{ inputs.anemoi-graphs }}" >> $GITHUB_OUTPUT
        echo anemoi-models="${{ inputs.anemoi-models }}" >> $GITHUB_OUTPUT
        echo anemoi-training="${{ inputs.anemoi-training }}" >> $GITHUB_OUTPUT
        echo anemoi-inference="${{ inputs.anemoi-inference }}" >> $GITHUB_OUTPUT
        echo ecbuild="${{ inputs.ecbuild }}" >> $GITHUB_OUTPUT
        echo eccodes="${{ inputs.eccodes }}" >> $GITHUB_OUTPUT
        echo eccodes-python="${{ inputs.eccodes-python }}" >> $GITHUB_OUTPUT
        echo ecflow="${{ inputs.ecflow }}" >> $GITHUB_OUTPUT
        echo ecflow-light="${{ inputs.ecflow-light }}" >> $GITHUB_OUTPUT
        echo eckit="${{ inputs.eckit }}" >> $GITHUB_OUTPUT
        echo fckit="${{ inputs.fckit }}" >> $GITHUB_OUTPUT
        echo fdb="${{ inputs.fdb }}" >> $GITHUB_OUTPUT
        echo findlibs="${{ inputs.findlibs }}" >> $GITHUB_OUTPUT
        echo gribjump="${{ inputs.gribjump }}" >> $GITHUB_OUTPUT
        echo infero="${{ inputs.infero }}" >> $GITHUB_OUTPUT
        echo kronos="${{ inputs.kronos }}" >> $GITHUB_OUTPUT
        echo metkit="${{ inputs.metkit }}" >> $GITHUB_OUTPUT
        echo mir="${{ inputs.mir }}" >> $GITHUB_OUTPUT
        echo multio="${{ inputs.multio }}" >> $GITHUB_OUTPUT
        echo multio-python="${{ inputs.multio-python }}" >> $GITHUB_OUTPUT
        echo multiurl="${{ inputs.multiurl }}" >> $GITHUB_OUTPUT
        echo odc="${{ inputs.odc }}" >> $GITHUB_OUTPUT
        echo pdbufr="${{ inputs.pdbufr }}" >> $GITHUB_OUTPUT
        echo plume="${{ inputs.plume }}" >> $GITHUB_OUTPUT
        echo pyfdb="${{ inputs.pyfdb }}" >> $GITHUB_OUTPUT
        echo pyodc="${{ inputs.pyodc }}" >> $GITHUB_OUTPUT
        echo skinnywms="${{ inputs.skinnywms }}" >> $GITHUB_OUTPUT
        echo thermofeel="${{ inputs.thermofeel }}" >> $GITHUB_OUTPUT
        echo danu="${{ inputs.danu }}" >> $GITHUB_OUTPUT
        echo troika="${{ inputs.troika }}" >> $GITHUB_OUTPUT
        echo cascade="${{ inputs.cascade }}" >> $GITHUB_OUTPUT
        echo covjsonkit="${{ inputs.covjsonkit }}" >> $GITHUB_OUTPUT
    - name: checkout reusable wfs repo
      uses: actions/checkout@v4
      with:
        repository: ecmwf-actions/downstream-ci
        ref: main
    - name: Run setup script
      id: setup
      env:
        TOKEN: ${{ secrets.GH_REPO_READ_TOKEN }}
        CONFIG: |
          ecmwf/atlas:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.atlas }}
            optional_matrix: null
          ecmwf/atlas-orca:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.atlas-orca }}
            optional_matrix: null
          ecmwf/cfgrib:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: master
            input: ${{ steps.prepare-inputs.outputs.cfgrib }}
            optional_matrix: null
          ecmwf/earthkit:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit }}
            optional_matrix: null
          ecmwf/earthkit-data:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit-data }}
            optional_matrix: null
          ecmwf/earthkit-geo:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit-geo }}
            optional_matrix: null
          ecmwf/earthkit-meteo:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit-meteo }}
            optional_matrix: null
          ecmwf/earthkit-regrid:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit-regrid }}
            optional_matrix: null
          ecmwf/earthkit-time:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit-time }}
            optional_matrix: null
          ecmwf/anemoi-datasets:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-datasets }}
            optional_matrix: null
          ecmwf/anemoi-utils:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-utils }}
            optional_matrix: null
          ecmwf/anemoi-transform:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-transform }}
            optional_matrix: null
          ecmwf/anemoi-graphs:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-graphs }}
            optional_matrix: null
          ecmwf/anemoi-models:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-models }}
            optional_matrix: null
          ecmwf/anemoi-training:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-training }}
            optional_matrix: null
          ecmwf/anemoi-inference:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-inference }}
            optional_matrix: null
          ecmwf/ecbuild:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.ecbuild }}
            optional_matrix: null
          ecmwf/eccodes:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.eccodes }}
            optional_matrix: null
          ecmwf/eccodes-python:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.eccodes-python }}
            optional_matrix: null
          ecmwf/ecflow:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.ecflow }}
            optional_matrix:
            - clang@macos-13-arm
            - clang@macos-13-x86
            - gnu@debian-12
          ecmwf/ecflow-light:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.ecflow-light }}
            optional_matrix: null
          ecmwf/eckit:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.eckit }}
            optional_matrix: null
          ecmwf/fckit:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.fckit }}
            optional_matrix: null
          ecmwf/fdb:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.fdb }}
            optional_matrix: null
          ecmwf/findlibs:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.findlibs }}
            optional_matrix: null
          ecmwf/gribjump:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.gribjump }}
            optional_matrix: null
          ecmwf/infero:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.infero }}
            optional_matrix: null
          ecmwf/kronos:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.kronos }}
            optional_matrix: null
          ecmwf/metkit:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.metkit }}
            optional_matrix: null
          ecmwf/mir:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.mir }}
            optional_matrix: null
          ecmwf/multio:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.multio }}
            optional_matrix: null
          ecmwf/multio-python:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.multio-python }}
            optional_matrix: null
          ecmwf/multiurl:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: main
            input: ${{ steps.prepare-inputs.outputs.multiurl }}
            optional_matrix: null
          ecmwf/odc:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.odc }}
            optional_matrix: null
          ecmwf/pdbufr:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.pdbufr }}
            optional_matrix: null
          ecmwf/plume:
            path: .github/ci-hpc-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.plume }}
            optional_matrix: null
          ecmwf/pyfdb:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.pyfdb }}
            optional_matrix: null
          ecmwf/pyodc:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.pyodc }}
            optional_matrix: null
          ecmwf/skinnywms:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.skinnywms }}
            optional_matrix: null
          ecmwf/thermofeel:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.thermofeel }}
            optional_matrix: null
          ecmwf/danu:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.danu }}
            optional_matrix: null
          ecmwf/troika:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.troika }}
            optional_matrix: null
          ecmwf/cascade:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.cascade }}
            optional_matrix: null
          ecmwf/covjsonkit:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.covjsonkit }}
            optional_matrix: null
          ecmwf/danu:
            path: .github/ci-hpc-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.danu }}
            optional_matrix: null
        PYTHON_VERSIONS: |+
          - '3.10'

        PYTHON_JOBS: |+
          - gnu-8.5.0

        MATRIX: |
          include:
          - compiler: gnu-12.2.0
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            compiler_modules: gcc/12.2.0
            name: gnu-12.2.0
            site: atos
          - compiler: gnu-8.5.0
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            compiler_modules: gcc/8.5.0
            name: gnu-8.5.0
            site: atos
          - compiler: nvidia-22.11
            compiler_cc: nvc
            compiler_cxx: nvc++
            compiler_fc: nvfortran
            compiler_modules: prgenv/nvidia,nvidia/22.11
            name: nvidia-22.11
            site: atos
          - compiler: intel-2021.4.0
            compiler_cc: icc
            compiler_cxx: icpc
            compiler_fc: ifort
            compiler_modules: prgenv/intel,intel/2021.4.0
            name: intel-2021.4.0
            site: atos
          name:
          - gnu-12.2.0
          - gnu-8.5.0
          - nvidia-22.11
          - intel-2021.4.0
        OPTIONAL_MATRIX: |
          include:
          - compiler: gnu-12.2.0
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            compiler_modules: LUMI/23.09,cpeGNU/23.09
            name: lumi-gnu-12.2.0
            site: lumi
          name:
          - lumi
        WORKFLOW_NAME: downstream-ci-hpc
        SKIP_MATRIX_JOBS: ${{ inputs.skip_matrix_jobs }}
      run: python setup_downstream_ci.py
  atlas:
    name: atlas
    needs:
    - fckit
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.atlas_matrix && (needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.atlas) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.atlas_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  atlas-orca:
    name: atlas-orca
    needs:
    - atlas
    - fckit
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.atlas-orca_matrix && (needs.setup.outputs.atlas || needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.atlas-orca) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.atlas-orca_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.atlas }}
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  cfgrib:
    name: cfgrib
    needs:
    - eccodes-python
    - eccodes
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.cfgrib_matrix && (needs.setup.outputs.eccodes-python || needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.cfgrib) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.cfgrib_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ${{ needs.setup.outputs.eccodes-python || (needs.setup.outputs.use_master == 'True' && 'ecmwf/eccodes-python@master') || 'ecmwf/eccodes-python@develop' }}
        python_requirements: ci/requirements-tests.in
  earthkit:
    name: earthkit
    needs:
    - earthkit-data
    - cfgrib
    - multiurl
    - pdbufr
    - eccodes-python
    - eccodes
    - pyodc
    - odc
    - eckit
    - ecbuild
    - earthkit-geo
    - earthkit-meteo
    - earthkit-regrid
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit_matrix && (needs.setup.outputs.earthkit-data || needs.setup.outputs.cfgrib || needs.setup.outputs.multiurl || needs.setup.outputs.pdbufr || needs.setup.outputs.eccodes-python || needs.setup.outputs.eccodes || needs.setup.outputs.pyodc || needs.setup.outputs.odc || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.earthkit-geo || needs.setup.outputs.earthkit-meteo || needs.setup.outputs.earthkit-regrid || needs.setup.outputs.earthkit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.odc }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: |-
          ${{ needs.setup.outputs.earthkit-data || (needs.setup.outputs.use_master == 'True' && 'ecmwf/earthkit-data@main') || 'ecmwf/earthkit-data@develop' }}
          ${{ needs.setup.outputs.cfgrib || (needs.setup.outputs.use_master == 'True' && 'ecmwf/cfgrib@master') || 'ecmwf/cfgrib@master' }}
          ${{ needs.setup.outputs.multiurl || (needs.setup.outputs.use_master == 'True' && 'ecmwf/multiurl@main') || 'ecmwf/multiurl@main' }}
          ${{ needs.setup.outputs.pdbufr || (needs.setup.outputs.use_master == 'True' && 'ecmwf/pdbufr@master') || 'ecmwf/pdbufr@develop' }}
          ${{ needs.setup.outputs.eccodes-python || (needs.setup.outputs.use_master == 'True' && 'ecmwf/eccodes-python@master') || 'ecmwf/eccodes-python@develop' }}
          ${{ needs.setup.outputs.pyodc || (needs.setup.outputs.use_master == 'True' && 'ecmwf/pyodc@master') || 'ecmwf/pyodc@develop' }}
          ${{ needs.setup.outputs.earthkit-geo || (needs.setup.outputs.use_master == 'True' && 'ecmwf/earthkit-geo@main') || 'ecmwf/earthkit-geo@develop' }}
          ${{ needs.setup.outputs.earthkit-meteo || (needs.setup.outputs.use_master == 'True' && 'ecmwf/earthkit-meteo@main') || 'ecmwf/earthkit-meteo@develop' }}
          ${{ needs.setup.outputs.earthkit-regrid || (needs.setup.outputs.use_master == 'True' && 'ecmwf/earthkit-regrid@main') || 'ecmwf/earthkit-regrid@develop' }}
        python_requirements: tests/downstream-ci-requirements.txt
  earthkit-data:
    name: earthkit-data
    needs:
    - cfgrib
    - multiurl
    - pdbufr
    - eccodes-python
    - eccodes
    - pyodc
    - odc
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-data_matrix && (needs.setup.outputs.cfgrib || needs.setup.outputs.multiurl || needs.setup.outputs.pdbufr || needs.setup.outputs.eccodes-python || needs.setup.outputs.eccodes || needs.setup.outputs.pyodc || needs.setup.outputs.odc || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.earthkit-data) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-data_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.odc }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: |-
          ${{ needs.setup.outputs.cfgrib || (needs.setup.outputs.use_master == 'True' && 'ecmwf/cfgrib@master') || 'ecmwf/cfgrib@master' }}
          ${{ needs.setup.outputs.multiurl || (needs.setup.outputs.use_master == 'True' && 'ecmwf/multiurl@main') || 'ecmwf/multiurl@main' }}
          ${{ needs.setup.outputs.pdbufr || (needs.setup.outputs.use_master == 'True' && 'ecmwf/pdbufr@master') || 'ecmwf/pdbufr@develop' }}
          ${{ needs.setup.outputs.eccodes-python || (needs.setup.outputs.use_master == 'True' && 'ecmwf/eccodes-python@master') || 'ecmwf/eccodes-python@develop' }}
          ${{ needs.setup.outputs.pyodc || (needs.setup.outputs.use_master == 'True' && 'ecmwf/pyodc@master') || 'ecmwf/pyodc@develop' }}
        python_toml_opt_dep_sections: all,test,ci
  earthkit-geo:
    name: earthkit-geo
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-geo_matrix && (needs.setup.outputs.earthkit-geo) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-geo_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
        python_requirements: tests/downstream-ci-requirements.txt
  earthkit-geo:
    name: earthkit-geo
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-geo && (inputs.earthkit-geo) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-geo) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
        python_requirements: tests/downstream-ci-requirements.txt
  earthkit-meteo:
    name: earthkit-meteo
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-meteo_matrix && (needs.setup.outputs.earthkit-meteo) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-meteo_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
        python_requirements: tests/downstream-ci-requirements.txt
  earthkit-regrid:
    name: earthkit-regrid
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-regrid_matrix && (needs.setup.outputs.earthkit-regrid) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-regrid_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
        python_requirements: tests/downstream-ci-requirements.txt
  earthkit-time:
    name: earthkit-time
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-time_matrix && (needs.setup.outputs.earthkit-time) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-time_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  anemoi-datasets:
    name: anemoi-datasets
    needs:
    - anemoi-utils
    - anemoi-transform
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-datasets_matrix && (needs.setup.outputs.anemoi-utils || needs.setup.outputs.anemoi-transform || needs.setup.outputs.anemoi-datasets) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-datasets_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: |-
          ${{ needs.setup.outputs.anemoi-utils || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-utils@main') || 'ecmwf/anemoi-utils@develop' }}
          ${{ needs.setup.outputs.anemoi-transform || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-transform@main') || 'ecmwf/anemoi-transform@develop' }}
        python_toml_opt_dep_sections: all,tests
  anemoi-utils:
    name: anemoi-utils
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-utils_matrix && (needs.setup.outputs.anemoi-utils) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-utils_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
        python_toml_opt_dep_sections: all,tests
  anemoi-transform:
    name: anemoi-transform
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-transform_matrix && (needs.setup.outputs.anemoi-transform) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-transform_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
        python_toml_opt_dep_sections: all,tests
  anemoi-graphs:
    name: anemoi-graphs
    needs:
    - anemoi-datasets
    - anemoi-transform
    - anemoi-utils
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-graphs_matrix && (needs.setup.outputs.anemoi-datasets || needs.setup.outputs.anemoi-transform || needs.setup.outputs.anemoi-utils || needs.setup.outputs.anemoi-graphs) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-graphs_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: |-
          ${{ needs.setup.outputs.anemoi-datasets || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-datasets@main') || 'ecmwf/anemoi-datasets@develop' }}
          ${{ needs.setup.outputs.anemoi-transform || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-transform@main') || 'ecmwf/anemoi-transform@develop' }}
          ${{ needs.setup.outputs.anemoi-utils || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-utils@main') || 'ecmwf/anemoi-utils@develop' }}
        python_toml_opt_dep_sections: all,tests
  anemoi-models:
    name: anemoi-models
    needs:
    - anemoi-utils
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-models_matrix && (needs.setup.outputs.anemoi-utils || needs.setup.outputs.anemoi-models) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-models_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ${{ needs.setup.outputs.anemoi-utils || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-utils@main') || 'ecmwf/anemoi-utils@develop' }}
        python_toml_opt_dep_sections: all,tests
  anemoi-training:
    name: anemoi-training
    needs:
    - anemoi-models
    - anemoi-graphs
    - anemoi-datasets
    - anemoi-utils
    - anemoi-transform
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-training_matrix && (needs.setup.outputs.anemoi-models || needs.setup.outputs.anemoi-graphs || needs.setup.outputs.anemoi-datasets || needs.setup.outputs.anemoi-utils || needs.setup.outputs.anemoi-transform || needs.setup.outputs.anemoi-training) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-training_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: |-
          ${{ needs.setup.outputs.anemoi-models || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-models@main') || 'ecmwf/anemoi-models@develop' }}
          ${{ needs.setup.outputs.anemoi-graphs || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-graphs@main') || 'ecmwf/anemoi-graphs@develop' }}
          ${{ needs.setup.outputs.anemoi-datasets || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-datasets@main') || 'ecmwf/anemoi-datasets@develop' }}
          ${{ needs.setup.outputs.anemoi-utils || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-utils@main') || 'ecmwf/anemoi-utils@develop' }}
          ${{ needs.setup.outputs.anemoi-transform || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-transform@main') || 'ecmwf/anemoi-transform@develop' }}
        python_toml_opt_dep_sections: all,tests
  anemoi-inference:
    name: anemoi-inference
    needs:
    - anemoi-utils
    - anemoi-transform
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-inference_matrix && (needs.setup.outputs.anemoi-utils || needs.setup.outputs.anemoi-transform || needs.setup.outputs.anemoi-inference) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-inference_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: |-
          ${{ needs.setup.outputs.anemoi-utils || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-utils@main') || 'ecmwf/anemoi-utils@develop' }}
          ${{ needs.setup.outputs.anemoi-transform || (needs.setup.outputs.use_master == 'True' && 'ecmwf/anemoi-transform@main') || 'ecmwf/anemoi-transform@develop' }}
        python_toml_opt_dep_sections: all,tests
  ecbuild:
    name: ecbuild
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.ecbuild_matrix && (needs.setup.outputs.ecbuild) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecbuild_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  eccodes:
    name: eccodes
    needs:
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eccodes_matrix && (needs.setup.outputs.ecbuild || needs.setup.outputs.eccodes) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  eccodes-python:
    name: eccodes-python
    needs:
    - eccodes
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eccodes-python_matrix && (needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.eccodes-python) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes-python_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
      ECCODES_PYTHON_TRACE_LIB_SEARCH: 1
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  ecflow:
    name: ecflow
    needs:
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.ecflow_matrix && (needs.setup.outputs.ecbuild || needs.setup.outputs.ecflow) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  ecflow-light:
    name: ecflow-light
    needs:
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.ecflow-light_matrix && (needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.ecflow-light) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow-light_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  eckit:
    name: eckit
    needs:
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eckit_matrix && (needs.setup.outputs.ecbuild || needs.setup.outputs.eckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eckit_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  fckit:
    name: fckit
    needs:
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fckit_matrix && (needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.fckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fckit_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  fdb:
    name: fdb
    needs:
    - metkit
    - eccodes
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fdb_matrix && (needs.setup.outputs.metkit || needs.setup.outputs.eccodes || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.fdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fdb_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.metkit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  findlibs:
    name: findlibs
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.findlibs_matrix && (needs.setup.outputs.findlibs) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.findlibs_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
        python_requirements: tests/downstream-ci-requirements.txt
  gribjump:
    name: gribjump
    needs:
    - fdb
    - metkit
    - eccodes
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.gribjump_matrix && (needs.setup.outputs.fdb || needs.setup.outputs.metkit || needs.setup.outputs.eccodes || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.gribjump) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.gribjump_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.fdb }}
          ${{ needs.setup.outputs.metkit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  infero:
    name: infero
    needs:
    - fckit
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.infero_matrix && (needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.infero) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.infero_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  kronos:
    name: kronos
    needs:
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.kronos_matrix && (needs.setup.outputs.ecbuild || needs.setup.outputs.kronos) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.kronos_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  metkit:
    name: metkit
    needs:
    - eccodes
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.metkit_matrix && (needs.setup.outputs.eccodes || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.metkit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.metkit_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  mir:
    name: mir
    needs:
    - atlas
    - fckit
    - eckit
    - eccodes
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.mir_matrix && (needs.setup.outputs.atlas || needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.mir) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.mir_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.atlas }}
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  multio:
    name: multio
    needs:
    - atlas-orca
    - fdb
    - metkit
    - mir
    - atlas
    - fckit
    - eckit
    - eccodes
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.multio_matrix && (needs.setup.outputs.atlas-orca || needs.setup.outputs.fdb || needs.setup.outputs.metkit || needs.setup.outputs.mir || needs.setup.outputs.atlas || needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.multio) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.multio_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
      CTEST_PARALLEL_LEVEL: 1
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.atlas-orca }}
          ${{ needs.setup.outputs.fdb }}
          ${{ needs.setup.outputs.metkit }}
          ${{ needs.setup.outputs.mir }}
          ${{ needs.setup.outputs.atlas }}
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  multio-python:
    name: multio-python
    needs:
    - multio
    - atlas-orca
    - fdb
    - metkit
    - mir
    - atlas
    - fckit
    - eckit
    - eccodes
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.multio-python_matrix && (needs.setup.outputs.multio || needs.setup.outputs.atlas-orca || needs.setup.outputs.fdb || needs.setup.outputs.metkit || needs.setup.outputs.mir || needs.setup.outputs.atlas || needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.multio-python) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.multio-python_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.multio }}
          ${{ needs.setup.outputs.atlas-orca }}
          ${{ needs.setup.outputs.fdb }}
          ${{ needs.setup.outputs.metkit }}
          ${{ needs.setup.outputs.mir }}
          ${{ needs.setup.outputs.atlas }}
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  multiurl:
    name: multiurl
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.multiurl_matrix && (needs.setup.outputs.multiurl) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.multiurl_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  odc:
    name: odc
    needs:
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.odc_matrix && (needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.odc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.odc_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  pdbufr:
    name: pdbufr
    needs:
    - eccodes-python
    - eccodes
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pdbufr_matrix && (needs.setup.outputs.eccodes-python || needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.pdbufr) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pdbufr_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ${{ needs.setup.outputs.eccodes-python || (needs.setup.outputs.use_master == 'True' && 'ecmwf/eccodes-python@master') || 'ecmwf/eccodes-python@develop' }}
        python_requirements: tests/downstream-ci-requirements.txt
  plume:
    name: plume
    needs:
    - atlas
    - fckit
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.plume_matrix && (needs.setup.outputs.atlas || needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.plume) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.plume_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.atlas }}
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  pyfdb:
    name: pyfdb
    needs:
    - fdb
    - metkit
    - eccodes
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyfdb_matrix && (needs.setup.outputs.fdb || needs.setup.outputs.metkit || needs.setup.outputs.eccodes || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.pyfdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyfdb_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.fdb }}
          ${{ needs.setup.outputs.metkit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  pyodc:
    name: pyodc
    needs:
    - odc
    - eckit
    - ecbuild
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyodc_matrix && (needs.setup.outputs.odc || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.pyodc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyodc_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: |-
          ${{ needs.setup.outputs.odc }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        python_dependencies: ''
  skinnywms:
    name: skinnywms
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.skinnywms_matrix && (needs.setup.outputs.skinnywms) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.skinnywms_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  thermofeel:
    name: thermofeel
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.thermofeel_matrix && (needs.setup.outputs.thermofeel) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.thermofeel_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  danu:
    name: danu
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.danu_matrix && (needs.setup.outputs.danu) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.danu_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
        python_requirements: requirements.txt
        conda_deps: numpy scipy pcraster gdal netCDF4 pandas dask lz4 eccodes magics
  troika:
    name: troika
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.troika_matrix && (needs.setup.outputs.troika) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.troika_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  cascade:
    name: cascade
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.cascade_matrix && (needs.setup.outputs.cascade) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.cascade_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''
  covjsonkit:
    name: covjsonkit
    needs:
    - setup
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.covjsonkit_matrix && (needs.setup.outputs.covjsonkit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.covjsonkit_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on:
    - self-hosted
    - linux
    - hpc
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
      with:
        github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
        github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
        troika_user: ${{ secrets.HPC_CI_SSH_USER }}
        repository: ${{ matrix.owner_repo_ref }}
        build_config: ${{ matrix.config_path }}
        dependencies: ''
        python_dependencies: ''

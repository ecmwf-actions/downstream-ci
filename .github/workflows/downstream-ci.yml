name: downstream-ci
'on':
  workflow_call:
    inputs:
      codecov_upload:
        description: Whether to upload code coverage
        type: boolean
        required: false
      atlas:
        required: false
        type: string
      cfgrib:
        required: false
        type: string
      earthkit-data:
        required: false
        type: string
      earthkit-geo:
        required: false
        type: string
      earthkit-meteo:
        required: false
        type: string
      earthkit-regrid:
        required: false
        type: string
      eccodes:
        required: false
        type: string
      eccodes-python:
        required: false
        type: string
      ecflow:
        required: false
        type: string
      ecflow-light:
        required: false
        type: string
      eckit:
        required: false
        type: string
      fckit:
        required: false
        type: string
      fdb:
        required: false
        type: string
      metkit:
        required: false
        type: string
      mir:
        required: false
        type: string
      multiurl:
        required: false
        type: string
      odc:
        required: false
        type: string
      pdbufr:
        required: false
        type: string
      plume:
        required: false
        type: string
      conflator:
        required: false
        type: string
      pyfdb:
        required: false
        type: string
      pyodc:
        required: false
        type: string
      skinnywms:
        required: false
        type: string
      thermofeel:
        required: false
        type: string
      conflator:
        required: false
        type: string
      skip_matrix_jobs:
        description: List of matrix jobs to be skipped.
        required: false
        type: string
      python_qa:
        description: Whether to run code QA tasks.
        type: boolean
        required: false
      clang_format:
        description: Whether to run clang-format QA.
        type: boolean
        required: false
      clang_format_ignore:
        description: A list of paths to be skipped during formatting check.
        type: string
        required: false
jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      atlas: ${{ steps.setup.outputs.atlas }}
      cfgrib: ${{ steps.setup.outputs.cfgrib }}
      earthkit-data: ${{ steps.setup.outputs.earthkit-data }}
      earthkit-geo: ${{ steps.setup.outputs.earthkit-geo }}
      earthkit-meteo: ${{ steps.setup.outputs.earthkit-meteo }}
      earthkit-regrid: ${{ steps.setup.outputs.earthkit-regrid }}
      eccodes: ${{ steps.setup.outputs.eccodes }}
      eccodes-python: ${{ steps.setup.outputs.eccodes-python }}
      ecflow: ${{ steps.setup.outputs.ecflow }}
      ecflow-light: ${{ steps.setup.outputs.ecflow-light }}
      eckit: ${{ steps.setup.outputs.eckit }}
      fckit: ${{ steps.setup.outputs.fckit }}
      fdb: ${{ steps.setup.outputs.fdb }}
      metkit: ${{ steps.setup.outputs.metkit }}
      mir: ${{ steps.setup.outputs.mir }}
      multiurl: ${{ steps.setup.outputs.multiurl }}
      odc: ${{ steps.setup.outputs.odc }}
      pdbufr: ${{ steps.setup.outputs.pdbufr }}
      plume: ${{ steps.setup.outputs.plume }}
      pyfdb: ${{ steps.setup.outputs.pyfdb }}
      pyodc: ${{ steps.setup.outputs.pyodc }}
      skinnywms: ${{ steps.setup.outputs.skinnywms }}
      thermofeel: ${{ steps.setup.outputs.thermofeel }}
      conflator: ${{ steps.setup.outputs.conflator }}
      dep_tree: ${{ steps.setup.outputs.build_package_dep_tree }}
      trigger_repo: ${{ steps.setup.outputs.trigger_repo }}
      py_codecov_platform: ${{ steps.setup.outputs.py_codecov_platform }}
    steps:
    - name: checkout reusable wfs repo
      uses: actions/checkout@v4
      with:
        repository: ecmwf-actions/downstream-ci
        ref: main
    - name: Run setup script
      id: setup
      env:
        TOKEN: ${{ secrets.GH_REPO_READ_TOKEN }}
        CONFIG: |
          ecmwf/atlas:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.atlas }}
            optional_matrix: null
          ecmwf/cfgrib:
            path: .github/ci-config.yml
            python: true
            master_branch: master
            develop_branch: master
            input: ${{ inputs.cfgrib }}
            optional_matrix: null
          ecmwf/earthkit-data:
            path: .github/ci-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ inputs.earthkit-data }}
            optional_matrix: null
          ecmwf/earthkit-geo:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ inputs.earthkit-geo }}
            optional_matrix: null
          ecmwf/earthkit-meteo:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ inputs.earthkit-meteo }}
            optional_matrix: null
          ecmwf/earthkit-regrid:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ inputs.earthkit-regrid }}
            optional_matrix: null
          ecmwf/eccodes:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.eccodes }}
            optional_matrix: null
          ecmwf/eccodes-python:
            path: .github/ci-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.eccodes-python }}
            optional_matrix: null
          ecmwf/ecflow:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.ecflow }}
            optional_matrix: null
          ecmwf/ecflow-light:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.ecflow-light }}
            optional_matrix: null
          ecmwf/eckit:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.eckit }}
            optional_matrix: null
          ecmwf/fckit:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.fckit }}
            optional_matrix: null
          ecmwf/fdb:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.fdb }}
            optional_matrix: null
          ecmwf/metkit:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.metkit }}
            optional_matrix: null
          ecmwf/mir:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.mir }}
            optional_matrix: null
          ecmwf/multiurl:
            path: ''
            python: true
            master_branch: main
            develop_branch: main
            input: ${{ inputs.multiurl }}
            optional_matrix: null
          ecmwf/odc:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.odc }}
            optional_matrix: null
          ecmwf/pdbufr:
            path: .github/ci-config.yml
            python: true
            master_branch: master
            develop_branch: master
            input: ${{ inputs.pdbufr }}
            optional_matrix: null
          ecmwf/plume:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.plume }}
            optional_matrix: null
          ecmwf/pyfdb:
            path: .github/ci-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.pyfdb }}
            optional_matrix: null
          ecmwf/pyodc:
            path: .github/ci-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.pyodc }}
            optional_matrix: null
          ecmwf/skinnywms:
            path: ''
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.skinnywms }}
            optional_matrix: null
          ecmwf/thermofeel:
            path: ''
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.thermofeel }}
            optional_matrix: null
          ecmwf/conflator:
            path: ''
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ inputs.conflator }}
            optional_matrix: null
        SKIP_MATRIX_JOBS: ${{ inputs.skip_matrix_jobs }}
        PYTHON_VERSIONS: |+
          - '3.10'

        PYTHON_JOBS: |+
          []

        MATRIX: |
          include:
          - compiler: gnu
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            env: |
              BOOST_ROOT_DIR=/usr
              BOOST_INCLUDE_DIR=/usr/include/boost169
              BOOST_LIB_DIR=/usr/lib64/boost169
            labels:
            - self-hosted
            - platform-builder-debian-11
            name: gnu@debian-11
            os: debian-11
          - compiler: gnu-7
            compiler_cc: gcc-7
            compiler_cxx: g++-7
            compiler_fc: gfortran-7
            env: |
              BOOST_ROOT_DIR=/usr
              BOOST_INCLUDE_DIR=/usr/include/boost169
              BOOST_LIB_DIR=/usr/lib64/boost169
            labels:
            - self-hosted
            - platform-builder-centos-7.9
            name: gnu-7@centos-7.9
            os: centos-7.9
          - compiler: gnu-8
            compiler_cc: gcc-8
            compiler_cxx: g++-8
            compiler_fc: gfortran-8
            env: |
              BOOST_ROOT_DIR=/usr
              BOOST_INCLUDE_DIR=/usr/include/boost169
              BOOST_LIB_DIR=/usr/lib64/boost169
            labels:
            - self-hosted
            - platform-builder-centos-7.9
            name: gnu-8@centos-7.9
            os: centos-7.9
          - compiler: gnu
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            env: |
              BOOST_ROOT_DIR=/usr
              BOOST_INCLUDE_DIR=/usr/include/boost169
              BOOST_LIB_DIR=/usr/lib64/boost169
            labels:
            - self-hosted
            - platform-builder-rocky-8.6
            name: gnu@rocky-8.6
            os: rocky-8.6
          - compiler: clang
            compiler_cc: clang
            compiler_cxx: clang++
            compiler_fc: gfortran
            env: |
              BOOST_ROOT_DIR=/usr
              BOOST_INCLUDE_DIR=/usr/include/boost169
              BOOST_LIB_DIR=/usr/lib64/boost169
            labels:
            - self-hosted
            - platform-builder-rocky-8.6
            name: clang@rocky-8.6
            os: rocky-8.6
            toolchain_file: /opt/actions-runner/files/toolchain-clang-rocky-8.6.cmake
          - compiler: gnu
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            env: |
              BOOST_ROOT_DIR=/usr
              BOOST_INCLUDE_DIR=/usr/include/boost169
              BOOST_LIB_DIR=/usr/lib64/boost169
            labels:
            - self-hosted
            - platform-builder-ubuntu-22.04
            name: gnu@ubuntu-22.04
            os: ubuntu-22.04
          - compiler: gnu
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            env: |
              BOOST_ROOT_DIR=/usr
              BOOST_INCLUDE_DIR=/usr/include/boost169
              BOOST_LIB_DIR=/usr/lib64/boost169
            labels:
            - self-hosted
            - platform-builder-fedora-37
            name: gnu@fedora-37
            os: fedora-37
          name:
          - gnu@debian-11
          - gnu-7@centos-7.9
          - gnu-8@centos-7.9
          - gnu@rocky-8.6
          - clang@rocky-8.6
          - gnu@ubuntu-22.04
          - gnu@fedora-37
        OPTIONAL_MATRIX: |
          null
          ...
      run: python setup_downstream_ci.py
  python-qa:
    name: python-qa
    needs:
    - setup
    if: ${{ inputs.python_qa }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install black flake8 isort
    - name: Check isort
      run: isort --check . --profile black
    - name: Check black
      run: black --check .
    - name: Check flake8
      run: flake8 .
  clang-format:
    name: clang-format
    needs:
    - setup
    if: ${{ inputs.clang_format }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install clang-format
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main
        sudo apt update
        sudo apt install -y clang-format-16
    - name: Run clang-format
      shell: bash {0}
      run: |-
        ignore="./\($(echo "${{ inputs.clang_format_ignore }}" | sed ':a;N;$!ba;s/\n/\\|/g')\)"
        echo "Ignore: $ignore"
        files=$(find . -not \( -regex $ignore -prune \) -regex ".*\.\(cpp\|hpp\|cc\|cxx\|h\|c\)")
        errors=0

        if [ ! -e ".clang-format" ]
        then
            echo "::error::Missing .clang-format file"
            exit 1
        fi

        for file in $files; do
            clang-format-16 --dry-run --Werror --style=file --fallback-style=none $file
            if [ $? -ne 0 ]; then
                ((errors++))
            fi
        done

        if [ $errors -ne 0 ]; then
            echo "::error::clang-format failed for $errors files"
            exit 1
        fi
  atlas:
    name: atlas
    needs:
    - fckit
    - eckit
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.atlas && (inputs.fckit || inputs.eckit || inputs.atlas) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.atlas) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ inputs.fckit }}
          ${{ inputs.eckit }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  cfgrib:
    name: cfgrib
    needs:
    - eccodes-python
    - eccodes
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.cfgrib && (inputs.eccodes-python || inputs.eccodes || inputs.cfgrib) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.cfgrib) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ${{ inputs.eccodes }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        python_dependencies: ${{ inputs.eccodes-python }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        requirements_path: ci/requirements-tests.in
  earthkit-data:
    name: earthkit-data
    needs:
    - cfgrib
    - multiurl
    - pdbufr
    - eccodes-python
    - eccodes
    - pyodc
    - odc
    - eckit
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-data && (inputs.cfgrib || inputs.multiurl || inputs.pdbufr || inputs.eccodes-python || inputs.eccodes || inputs.pyodc || inputs.odc || inputs.eckit || inputs.earthkit-data) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-data) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ inputs.eccodes }}
          ${{ inputs.odc }}
          ${{ inputs.eckit }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        python_dependencies: |-
          ${{ inputs.cfgrib }}
          ${{ inputs.multiurl }}
          ${{ inputs.pdbufr }}
          ${{ inputs.eccodes-python }}
          ${{ inputs.pyodc }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        requirements_path: tests/downstream-ci-requirements.txt
        test_cmd: |
          python -m pytest -vv -m 'not notebook and not no_cache_init' --cov=. --cov-report=xml
          python -m pytest -v -m 'notebook'
          python -m pytest --forked -vv -m 'no_cache_init'
          python -m coverage report
  earthkit-geo:
    name: earthkit-geo
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-geo && (inputs.earthkit-geo) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-geo) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        requirements_path: tests/downstream-ci-requirements.txt
  earthkit-meteo:
    name: earthkit-meteo
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-meteo && (inputs.earthkit-meteo) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-meteo) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        requirements_path: tests/downstream-ci-requirements.txt
  earthkit-regrid:
    name: earthkit-regrid
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-regrid && (inputs.earthkit-regrid) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-regrid) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        requirements_path: tests/downstream-ci-requirements.txt
  eccodes:
    name: eccodes
    needs:
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eccodes && (inputs.eccodes) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ''
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  eccodes-python:
    name: eccodes-python
    needs:
    - eccodes
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eccodes-python && (inputs.eccodes || inputs.eccodes-python) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes-python) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ${{ inputs.eccodes }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        python_dependencies: ''
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  ecflow:
    name: ecflow
    needs:
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.ecflow && (inputs.ecflow) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ''
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  ecflow-light:
    name: ecflow-light
    needs:
    - eckit
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.ecflow-light && (inputs.eckit || inputs.ecflow-light) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow-light) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ${{ inputs.eckit }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  eckit:
    name: eckit
    needs:
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eckit && (inputs.eckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eckit) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ''
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  fckit:
    name: fckit
    needs:
    - eckit
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fckit && (inputs.eckit || inputs.fckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fckit) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ${{ inputs.eckit }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  fdb:
    name: fdb
    needs:
    - metkit
    - eccodes
    - eckit
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fdb && (inputs.metkit || inputs.eccodes || inputs.eckit || inputs.fdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fdb) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ inputs.metkit }}
          ${{ inputs.eccodes }}
          ${{ inputs.eckit }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  metkit:
    name: metkit
    needs:
    - eccodes
    - eckit
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.metkit && (inputs.eccodes || inputs.eckit || inputs.metkit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.metkit) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ inputs.eccodes }}
          ${{ inputs.eckit }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  mir:
    name: mir
    needs:
    - atlas
    - fckit
    - eckit
    - eccodes
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.mir && (inputs.atlas || inputs.fckit || inputs.eckit || inputs.eccodes || inputs.mir) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.mir) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ inputs.atlas }}
          ${{ inputs.fckit }}
          ${{ inputs.eckit }}
          ${{ inputs.eccodes }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  multiurl:
    name: multiurl
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.multiurl && (inputs.multiurl) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.multiurl) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  odc:
    name: odc
    needs:
    - eckit
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.odc && (inputs.eckit || inputs.odc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.odc) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ${{ inputs.eckit }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  pdbufr:
    name: pdbufr
    needs:
    - eccodes-python
    - eccodes
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pdbufr && (inputs.eccodes-python || inputs.eccodes || inputs.pdbufr) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pdbufr) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ${{ inputs.eccodes }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        python_dependencies: ${{ inputs.eccodes-python }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        requirements_path: tests/downstream-ci-requirements.txt
  plume:
    name: plume
    needs:
    - atlas
    - fckit
    - eckit
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.plume && (inputs.atlas || inputs.fckit || inputs.eckit || inputs.plume) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.plume) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ inputs.atlas }}
          ${{ inputs.fckit }}
          ${{ inputs.eckit }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  pyfdb:
    name: pyfdb
    needs:
    - fdb
    - metkit
    - eccodes
    - eckit
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyfdb && (inputs.fdb || inputs.metkit || inputs.eccodes || inputs.eckit || inputs.pyfdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyfdb) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
      FDB5_CONFIG: '{"type":"local","engine":"toc","schema":"${{ github.workspace }}/tests/default_fdb_schema","spaces":[{"handler":"Default","roots":[{"path":"${{ github.workspace }}/data/fdb"}]}]}

        '
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ inputs.fdb }}
          ${{ inputs.metkit }}
          ${{ inputs.eccodes }}
          ${{ inputs.eckit }}
    - run: mkdir -p data/fdb
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        python_dependencies: ''
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  pyodc:
    name: pyodc
    needs:
    - odc
    - eckit
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyodc && (inputs.odc || inputs.eckit || inputs.pyodc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyodc) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ inputs.odc }}
          ${{ inputs.eckit }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        python_dependencies: ''
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  skinnywms:
    name: skinnywms
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.skinnywms && (inputs.skinnywms) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.skinnywms) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  thermofeel:
    name: thermofeel
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.thermofeel && (inputs.thermofeel) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.thermofeel) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  conflator:
    name: conflator
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.conflator && (inputs.conflator) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.conflator) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}

name: downstream ci

on:
  workflow_call:
    inputs:
      skip_matrix_jobs:
        description: List of matrix jobs to be skipped.
        required: false
        type: string
      codecov_upload:
        description: Whether to upload code coverage
        type: boolean
        required: false
      eccodes:
        required: false
        type: string
      eccodes-python:
        required: false
        type: string
      cfgrib:
        required: false
        type: string
      eckit:
        required: false
        type: string
      odc:
        required: false
        type: string
      pyodc:
        required: false
        type: string
      metkit:
        required: false
        type: string
      fdb:
        required: false
        type: string
      pyfdb:
        required: false
        type: string
      atlas:
        required: false
        type: string
      fckit:
        required: false
        type: string
      plume:
        required: false
        type: string
      mir:
        required: false
        type: string
      skinnywms:
        required: false
        type: string
      ecflow:
        required: false
        type: string
      pdbufr:
        required: false
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      eccodes: ${{ steps.setup.outputs.eccodes }}
      eccodes-python: ${{ steps.setup.outputs.eccodes-python }}
      cfgrib: ${{ steps.setup.outputs.cfgrib }}
      eckit: ${{ steps.setup.outputs.eckit }}
      odc: ${{ steps.setup.outputs.odc }}
      pyodc: ${{ steps.setup.outputs.pyodc }}
      metkit: ${{ steps.setup.outputs.metkit }}
      fdb: ${{ steps.setup.outputs.fdb }}
      pyfdb: ${{ steps.setup.outputs.pyfdb }}
      atlas: ${{ steps.setup.outputs.atlas }}
      fckit: ${{ steps.setup.outputs.fckit }}
      plume: ${{ steps.setup.outputs.plume }}
      mir: ${{ steps.setup.outputs.mir }}
      skinnywms: ${{ steps.setup.outputs.skinnywms }}
      pdbufr: ${{ steps.setup.outputs.pdbufr }}
      trigger_repo: ${{ steps.setup.outputs.trigger_repo}}
      dep_tree: ${{ steps.setup.outputs.build_package_dep_tree }}
      ecflow: ${{ steps.setup.outputs.ecflow }}
    steps:
      - name: checkout reusable wfs repo
        uses: actions/checkout@v3
        with:
          repository: 'ecmwf-actions/downstream-ci'
          ref: 'main'

      - name: Run setup script
        id: setup
        env:
          TOKEN: ${{ secrets.GH_REPO_READ_TOKEN }}
          CONFIG: |
            ecmwf/eccodes:
              path: .github/ci-config.yml
              input: ${{ inputs.eccodes }}
            ecmwf/eccodes-python:
              path: .github/ci-config.yml
              python: true
              input: ${{ inputs.eccodes-python }}
            ecmwf/cfgrib:
              path: .github/ci-config.yml
              master_branch: master
              develop_branch: master
              python: true
              input: ${{ inputs.cfgrib }}
            ecmwf/eckit:
              path: .github/ci-config.yml
              input: ${{ inputs.eckit }}
            ecmwf/odc:
              path: .github/ci-config.yml
              input: ${{ inputs.odc }}
            ecmwf/pyodc:
              path: .github/ci-config.yml
              python: true
              input: ${{ inputs.pyodc }}
            ecmwf/metkit:
              path: .github/ci-config.yml
              input: ${{ inputs.metkit }}
            ecmwf/fdb:
              path: .github/ci-config.yml
              input: ${{ inputs.fdb }}
            ecmwf/pyfdb:
              path: .github/ci-config.yml
              python: true
              input: ${{ inputs.pyfdb }}
            ecmwf/atlas:
              path: .github/ci-config.yml
              input: ${{ inputs.atlas }}
            ecmwf/fckit:
              path: .github/ci-config.yml
              input: ${{ inputs.fckit }}
            ecmwf/plume:
              path: .github/ci-config.yml
              input: ${{ inputs.plume }}
            ecmwf/mir:
              path: .github/ci-config.yml
              input: ${{ inputs.mir }}
            ecmwf/skinnywms:
              path: .github/ci-config.yml
              python: true
              input: ${{ inputs.skinnywms }}
            ecmwf/ecflow:
              path: .github/ci-config.yml
              input: ${{ inputs.ecflow }}
            ecmwf/pdbufr:
              path: .github/ci-config.yml
              python: true
              master_branch: master
              develop_branch: master
              input: ${{ inputs.pdbufr }}
          PYTHON_VERSIONS: |
            - "3.10"
          MATRIX: |
            name:
            - gnu@debian-11
            - gnu-7@centos-7.9
            - gnu-8@centos-7.9
            - gnu@rocky-8.6
            - clang@rocky-8.6
            - gnu@ubuntu-22.04
            - gnu@fedora-37
            include:
            - name: gnu@debian-11
              labels: [self-hosted, platform-builder-debian-11]
              os: debian-11
              compiler: gnu
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
            - name: gnu-7@centos-7.9
              labels: [self-hosted, platform-builder-centos-7.9]
              os: centos-7.9
              compiler: gnu-7
              compiler_cc: gcc-7
              compiler_cxx: g++-7
              compiler_fc: gfortran-7
            - name: gnu-8@centos-7.9
              labels: [self-hosted, platform-builder-centos-7.9]
              os: centos-7.9
              compiler: gnu-8
              compiler_cc: gcc-8
              compiler_cxx: g++-8
              compiler_fc: gfortran-8
            - name: gnu@rocky-8.6
              labels: [self-hosted, platform-builder-rocky-8.6]
              os: rocky-8.6
              compiler: gnu
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
            - name: clang@rocky-8.6
              labels: [self-hosted, platform-builder-rocky-8.6]
              os: rocky-8.6
              compiler: clang
              compiler_cc: clang
              compiler_cxx: clang++
              compiler_fc: gfortran
              toolchain_file: /opt/actions-runner/files/toolchain-clang-rocky-8.6.cmake
            - name: gnu@ubuntu-22.04
              labels: [self-hosted, platform-builder-ubuntu-22.04]
              os: ubuntu-22.04
              compiler: gnu
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
            - name: gnu@fedora-37
              labels: [self-hosted, platform-builder-fedora-37]
              os: fedora-37
              compiler: gnu
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
        run: python setup_downstream_ci.py

  eccodes:
    name: eccodes
    needs: [setup]
    if: ${{ inputs.eccodes && needs.setup.outputs.eccodes }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}

  eccodes-python:
    name: eccodes-python
    needs: [setup, eccodes]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eccodes-python && (inputs.eccodes || inputs.eccodes-python) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes-python) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - name: Build dependencies
        id: build-deps
        uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eccodes }}

      - uses: ecmwf-actions/reusable-workflows/ci-python@v2
        with:
          lib_path: ${{ steps.build-deps.outputs.lib_path }}

  cfgrib:
    name: cfgrib
    needs: [setup, eccodes, eccodes-python]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.cfgrib && (inputs.eccodes-python || inputs.eccodes || inputs.cfgrib) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.cfgrib) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - name: Build dependencies
        id: build-deps
        uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eccodes }}

      - uses: ecmwf-actions/reusable-workflows/ci-python@v2
        with:
          lib_path: ${{ steps.build-deps.outputs.lib_path }}
          python_dependencies: ${{ inputs.eccodes-python || 'ecmwf/eccodes-python@develop' }}

  pdbufr:
    name: pdbufr
    needs: [setup, eccodes, eccodes-python]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pdbufr && (inputs.pdbufr || inputs.eccodes || inputs.eccodes-python) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pdbufr) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - name: Build dependencies
        id: build-deps
        uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eccodes }}

      - uses: ecmwf-actions/reusable-workflows/ci-python@v2
        with:
          lib_path: ${{ steps.build-deps.outputs.lib_path }}
          python_dependencies: ${{ inputs.eccodes-python || 'ecmwf/eccodes-python@develop' }}

  eckit:
    name: eckit
    needs: [setup]
    if: ${{ inputs.eckit && needs.setup.outputs.eckit }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eckit) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}

  odc:
    name: odc
    needs: [setup, eckit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.odc && (inputs.eckit || inputs.odc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.odc) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eckit }}

  pyodc:
    name: pyodc
    needs: [setup, eckit, odc]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyodc && (inputs.eckit || inputs.odc || inputs.pyodc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyodc) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - name: Build dependencies
        id: build-deps
        uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.odc}}

      - uses: ecmwf-actions/reusable-workflows/ci-python@v2
        with:
          lib_path: ${{ steps.build-deps.outputs.lib_path }}
          conda_install: libffi=3.3

  metkit:
    name: metkit
    needs: [setup, eckit, eccodes]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.metkit && (inputs.eckit || inputs.eccodes || inputs.metkit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.metkit) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eccodes }}
            ${{ inputs.eckit }}

  fdb:
    name: fdb
    needs: [setup, eckit, eccodes, metkit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fdb && (inputs.eckit || inputs.eccodes || inputs.metkit || inputs.fdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fdb) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eccodes }}
            ${{ inputs.eckit }}
            ${{ inputs.metkit }}

  pyfdb:
    name: pyfdb
    needs: [setup, eckit, eccodes, metkit, fdb]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyfdb && (inputs.eckit || inputs.eccodes || inputs.metkit || inputs.fdb || inputs.pyfdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyfdb) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - name: Build dependencies
        id: build-deps
        uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eccodes }}
            ${{ inputs.eckit }}
            ${{ inputs.metkit }}
            ${{ inputs.fdb }}
      - run: mkdir -p data/fdb
      - uses: ecmwf-actions/reusable-workflows/ci-python@v2
        env:
          FDB5_CONFIG: >
            {"type":"local","engine":"toc","schema":"${{ github.workspace }}/tests/default_fdb_schema","spaces":[{"handler":"Default","roots":[{"path":"${{ github.workspace }}/data/fdb"}]}]}
        with:
          lib_path: ${{ steps.build-deps.outputs.lib_path }}
          conda_install: libffi=3.3

  atlas:
    name: atlas
    needs: [setup, eckit, fckit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.atlas && (inputs.eckit || inputs.atlas || inputs.fckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.atlas) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.fckit }}

  fckit:
    name: fckit
    needs: [setup, eckit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fckit && (inputs.eckit || inputs.fckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fckit) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eckit }}

  plume:
    name: plume
    needs: [setup, eckit, fckit, atlas]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.plume && (inputs.eckit || inputs.fckit || inputs.atlas || inputs.plume) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.plume) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.fckit }}
            ${{ inputs.atlas }}

  mir:
    name: mir
    needs: [setup, eckit, eccodes, atlas]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.mir && (inputs.eckit || inputs.eccodes || inputs.atlas || inputs.mir) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.mir) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          build_dependencies: |
            ${{ inputs.eccodes }}
            ${{ inputs.eckit }}
            ${{ inputs.atlas }}

  skinnywms:
    name: skinnywms
    needs: [setup]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.skinnywms && inputs.skinnywms }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.skinnywms) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-python@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          checkout: true

  ecflow:
    name: ecflow
    needs: [setup]
    if: ${{ inputs.ecflow && needs.setup.outputs.ecflow }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow) }}
    runs-on: ${{ matrix.labels }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ matrix.owner_repo_ref }}
          codecov_upload: ${{ needs.setup.outputs.trigger_repo == github.job && inputs.codecov_upload }}
          build_package_inputs: |
            repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}

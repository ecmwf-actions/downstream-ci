#
#
#
# This is a file generated by generate-workflows.py - DO NOT EDIT!!
#
#
#
name: downstream-ci
'on':
  workflow_call:
    inputs:
      codecov_upload:
        description: Whether to upload code coverage
        type: boolean
        required: false
      ci_group:
        required: false
        type: string
      atlas:
        required: false
        type: string
      atlas-orca:
        required: false
        type: string
      cfgrib:
        required: false
        type: string
      earthkit:
        required: false
        type: string
      earthkit-data:
        required: false
        type: string
      earthkit-geo:
        required: false
        type: string
      earthkit-meteo:
        required: false
        type: string
      earthkit-regrid:
        required: false
        type: string
      earthkit-time:
        required: false
        type: string
      anemoi-datasets:
        required: false
        type: string
      anemoi-utils:
        required: false
        type: string
      anemoi-transform:
        required: false
        type: string
      anemoi-graphs:
        required: false
        type: string
      anemoi-models:
        required: false
        type: string
      anemoi-training:
        required: false
        type: string
      anemoi-inference:
        required: false
        type: string
      cascade:
        required: false
        type: string
      conflator:
        required: false
        type: string
      ecbuild:
        required: false
        type: string
      eccodes:
        required: false
        type: string
      eccodes-python:
        required: false
        type: string
      ecflow:
        required: false
        type: string
      ecflow-light:
        required: false
        type: string
      eckit:
        required: false
        type: string
      fckit:
        required: false
        type: string
      fdb:
        required: false
        type: string
      findlibs:
        required: false
        type: string
      gribjump:
        required: false
        type: string
      pygribjump:
        required: false
        type: string
      infero:
        required: false
        type: string
      kronos:
        required: false
        type: string
      metkit:
        required: false
        type: string
      mir:
        required: false
        type: string
      multio:
        required: false
        type: string
      pymultio:
        required: false
        type: string
      multiurl:
        required: false
        type: string
      odc:
        required: false
        type: string
      pdbufr:
        required: false
        type: string
      plume:
        required: false
        type: string
      pyfdb:
        required: false
        type: string
      pyodc:
        required: false
        type: string
      skinnywms:
        required: false
        type: string
      thermofeel:
        required: false
        type: string
      troika:
        required: false
        type: string
      covjsonkit:
        required: false
        type: string
      skip_matrix_jobs:
        description: List of matrix jobs to be skipped.
        required: false
        type: string
      python_qa:
        description: Whether to run code QA tasks.
        type: boolean
        required: false
      clang_format:
        description: Whether to run clang-format QA.
        type: boolean
        required: false
      clang_format_ignore:
        description: A list of paths to be skipped during formatting check.
        type: string
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ (github.event_name == 'repository_dispatch' && format('{0}-{1}', github.event.client_payload.repository, github.event.client_payload.ref_name)) || github.ref }}-downstream-ci
  cancel-in-progress: true
jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      atlas: ${{ steps.prepare-inputs.outputs.atlas }}
      atlas_matrix: ${{ steps.setup.outputs.atlas }}
      atlas-orca: ${{ steps.prepare-inputs.outputs.atlas-orca }}
      atlas-orca_matrix: ${{ steps.setup.outputs.atlas-orca }}
      cfgrib: ${{ steps.prepare-inputs.outputs.cfgrib }}
      cfgrib_matrix: ${{ steps.setup.outputs.cfgrib }}
      earthkit: ${{ steps.prepare-inputs.outputs.earthkit }}
      earthkit_matrix: ${{ steps.setup.outputs.earthkit }}
      earthkit-data: ${{ steps.prepare-inputs.outputs.earthkit-data }}
      earthkit-data_matrix: ${{ steps.setup.outputs.earthkit-data }}
      earthkit-geo: ${{ steps.prepare-inputs.outputs.earthkit-geo }}
      earthkit-geo_matrix: ${{ steps.setup.outputs.earthkit-geo }}
      earthkit-meteo: ${{ steps.prepare-inputs.outputs.earthkit-meteo }}
      earthkit-meteo_matrix: ${{ steps.setup.outputs.earthkit-meteo }}
      earthkit-regrid: ${{ steps.prepare-inputs.outputs.earthkit-regrid }}
      earthkit-regrid_matrix: ${{ steps.setup.outputs.earthkit-regrid }}
      earthkit-time: ${{ steps.prepare-inputs.outputs.earthkit-time }}
      earthkit-time_matrix: ${{ steps.setup.outputs.earthkit-time }}
      anemoi-datasets: ${{ steps.prepare-inputs.outputs.anemoi-datasets }}
      anemoi-datasets_matrix: ${{ steps.setup.outputs.anemoi-datasets }}
      anemoi-utils: ${{ steps.prepare-inputs.outputs.anemoi-utils }}
      anemoi-utils_matrix: ${{ steps.setup.outputs.anemoi-utils }}
      anemoi-transform: ${{ steps.prepare-inputs.outputs.anemoi-transform }}
      anemoi-transform_matrix: ${{ steps.setup.outputs.anemoi-transform }}
      anemoi-graphs: ${{ steps.prepare-inputs.outputs.anemoi-graphs }}
      anemoi-graphs_matrix: ${{ steps.setup.outputs.anemoi-graphs }}
      anemoi-models: ${{ steps.prepare-inputs.outputs.anemoi-models }}
      anemoi-models_matrix: ${{ steps.setup.outputs.anemoi-models }}
      anemoi-training: ${{ steps.prepare-inputs.outputs.anemoi-training }}
      anemoi-training_matrix: ${{ steps.setup.outputs.anemoi-training }}
      anemoi-inference: ${{ steps.prepare-inputs.outputs.anemoi-inference }}
      anemoi-inference_matrix: ${{ steps.setup.outputs.anemoi-inference }}
      cascade: ${{ steps.prepare-inputs.outputs.cascade }}
      cascade_matrix: ${{ steps.setup.outputs.cascade }}
      conflator: ${{ steps.prepare-inputs.outputs.conflator }}
      conflator_matrix: ${{ steps.setup.outputs.conflator }}
      ecbuild: ${{ steps.prepare-inputs.outputs.ecbuild }}
      ecbuild_matrix: ${{ steps.setup.outputs.ecbuild }}
      eccodes: ${{ steps.prepare-inputs.outputs.eccodes }}
      eccodes_matrix: ${{ steps.setup.outputs.eccodes }}
      eccodes-python: ${{ steps.prepare-inputs.outputs.eccodes-python }}
      eccodes-python_matrix: ${{ steps.setup.outputs.eccodes-python }}
      ecflow: ${{ steps.prepare-inputs.outputs.ecflow }}
      ecflow_matrix: ${{ steps.setup.outputs.ecflow }}
      ecflow-light: ${{ steps.prepare-inputs.outputs.ecflow-light }}
      ecflow-light_matrix: ${{ steps.setup.outputs.ecflow-light }}
      eckit: ${{ steps.prepare-inputs.outputs.eckit }}
      eckit_matrix: ${{ steps.setup.outputs.eckit }}
      fckit: ${{ steps.prepare-inputs.outputs.fckit }}
      fckit_matrix: ${{ steps.setup.outputs.fckit }}
      fdb: ${{ steps.prepare-inputs.outputs.fdb }}
      fdb_matrix: ${{ steps.setup.outputs.fdb }}
      findlibs: ${{ steps.prepare-inputs.outputs.findlibs }}
      findlibs_matrix: ${{ steps.setup.outputs.findlibs }}
      gribjump: ${{ steps.prepare-inputs.outputs.gribjump }}
      gribjump_matrix: ${{ steps.setup.outputs.gribjump }}
      pygribjump: ${{ steps.prepare-inputs.outputs.pygribjump }}
      pygribjump_matrix: ${{ steps.setup.outputs.pygribjump }}
      infero: ${{ steps.prepare-inputs.outputs.infero }}
      infero_matrix: ${{ steps.setup.outputs.infero }}
      kronos: ${{ steps.prepare-inputs.outputs.kronos }}
      kronos_matrix: ${{ steps.setup.outputs.kronos }}
      metkit: ${{ steps.prepare-inputs.outputs.metkit }}
      metkit_matrix: ${{ steps.setup.outputs.metkit }}
      mir: ${{ steps.prepare-inputs.outputs.mir }}
      mir_matrix: ${{ steps.setup.outputs.mir }}
      multio: ${{ steps.prepare-inputs.outputs.multio }}
      multio_matrix: ${{ steps.setup.outputs.multio }}
      pymultio: ${{ steps.prepare-inputs.outputs.pymultio }}
      pymultio_matrix: ${{ steps.setup.outputs.pymultio }}
      multiurl: ${{ steps.prepare-inputs.outputs.multiurl }}
      multiurl_matrix: ${{ steps.setup.outputs.multiurl }}
      odc: ${{ steps.prepare-inputs.outputs.odc }}
      odc_matrix: ${{ steps.setup.outputs.odc }}
      pdbufr: ${{ steps.prepare-inputs.outputs.pdbufr }}
      pdbufr_matrix: ${{ steps.setup.outputs.pdbufr }}
      plume: ${{ steps.prepare-inputs.outputs.plume }}
      plume_matrix: ${{ steps.setup.outputs.plume }}
      pyfdb: ${{ steps.prepare-inputs.outputs.pyfdb }}
      pyfdb_matrix: ${{ steps.setup.outputs.pyfdb }}
      pyodc: ${{ steps.prepare-inputs.outputs.pyodc }}
      pyodc_matrix: ${{ steps.setup.outputs.pyodc }}
      skinnywms: ${{ steps.prepare-inputs.outputs.skinnywms }}
      skinnywms_matrix: ${{ steps.setup.outputs.skinnywms }}
      thermofeel: ${{ steps.prepare-inputs.outputs.thermofeel }}
      thermofeel_matrix: ${{ steps.setup.outputs.thermofeel }}
      troika: ${{ steps.prepare-inputs.outputs.troika }}
      troika_matrix: ${{ steps.setup.outputs.troika }}
      covjsonkit: ${{ steps.prepare-inputs.outputs.covjsonkit }}
      covjsonkit_matrix: ${{ steps.setup.outputs.covjsonkit }}
      dep_tree: ${{ steps.setup.outputs.build_package_dep_tree }}
      trigger_repo: ${{ steps.setup.outputs.trigger_repo }}
      trigger_pkgs: ${{ steps.setup.outputs.trigger_pkgs }}
      py_codecov_platform: ${{ steps.setup.outputs.py_codecov_platform }}
      use_master: ${{ steps.setup.outputs.use_master }}
      ci_group_pkgs: ${{ steps.setup.outputs.ci_group_pkgs }}
    steps:
    - name: Prepare inputs
      id: prepare-inputs
      run: |-
        echo atlas="${{ inputs.atlas }}" >> $GITHUB_OUTPUT
        echo atlas-orca="${{ inputs.atlas-orca }}" >> $GITHUB_OUTPUT
        echo cfgrib="${{ inputs.cfgrib }}" >> $GITHUB_OUTPUT
        echo earthkit="${{ inputs.earthkit }}" >> $GITHUB_OUTPUT
        echo earthkit-data="${{ inputs.earthkit-data }}" >> $GITHUB_OUTPUT
        echo earthkit-geo="${{ inputs.earthkit-geo }}" >> $GITHUB_OUTPUT
        echo earthkit-meteo="${{ inputs.earthkit-meteo }}" >> $GITHUB_OUTPUT
        echo earthkit-regrid="${{ inputs.earthkit-regrid }}" >> $GITHUB_OUTPUT
        echo earthkit-time="${{ inputs.earthkit-time }}" >> $GITHUB_OUTPUT
        echo anemoi-datasets="${{ inputs.anemoi-datasets }}" >> $GITHUB_OUTPUT
        echo anemoi-utils="${{ inputs.anemoi-utils }}" >> $GITHUB_OUTPUT
        echo anemoi-transform="${{ inputs.anemoi-transform }}" >> $GITHUB_OUTPUT
        echo anemoi-graphs="${{ inputs.anemoi-graphs }}" >> $GITHUB_OUTPUT
        echo anemoi-models="${{ inputs.anemoi-models }}" >> $GITHUB_OUTPUT
        echo anemoi-training="${{ inputs.anemoi-training }}" >> $GITHUB_OUTPUT
        echo anemoi-inference="${{ inputs.anemoi-inference }}" >> $GITHUB_OUTPUT
        echo cascade="${{ inputs.cascade }}" >> $GITHUB_OUTPUT
        echo conflator="${{ inputs.conflator }}" >> $GITHUB_OUTPUT
        echo ecbuild="${{ inputs.ecbuild }}" >> $GITHUB_OUTPUT
        echo eccodes="${{ inputs.eccodes }}" >> $GITHUB_OUTPUT
        echo eccodes-python="${{ inputs.eccodes-python }}" >> $GITHUB_OUTPUT
        echo ecflow="${{ inputs.ecflow }}" >> $GITHUB_OUTPUT
        echo ecflow-light="${{ inputs.ecflow-light }}" >> $GITHUB_OUTPUT
        echo eckit="${{ inputs.eckit }}" >> $GITHUB_OUTPUT
        echo fckit="${{ inputs.fckit }}" >> $GITHUB_OUTPUT
        echo fdb="${{ inputs.fdb }}" >> $GITHUB_OUTPUT
        echo findlibs="${{ inputs.findlibs }}" >> $GITHUB_OUTPUT
        echo gribjump="${{ inputs.gribjump }}" >> $GITHUB_OUTPUT
        echo pygribjump="${{ inputs.pygribjump }}" >> $GITHUB_OUTPUT
        echo infero="${{ inputs.infero }}" >> $GITHUB_OUTPUT
        echo kronos="${{ inputs.kronos }}" >> $GITHUB_OUTPUT
        echo metkit="${{ inputs.metkit }}" >> $GITHUB_OUTPUT
        echo mir="${{ inputs.mir }}" >> $GITHUB_OUTPUT
        echo multio="${{ inputs.multio }}" >> $GITHUB_OUTPUT
        echo pymultio="${{ inputs.pymultio }}" >> $GITHUB_OUTPUT
        echo multiurl="${{ inputs.multiurl }}" >> $GITHUB_OUTPUT
        echo odc="${{ inputs.odc }}" >> $GITHUB_OUTPUT
        echo pdbufr="${{ inputs.pdbufr }}" >> $GITHUB_OUTPUT
        echo plume="${{ inputs.plume }}" >> $GITHUB_OUTPUT
        echo pyfdb="${{ inputs.pyfdb }}" >> $GITHUB_OUTPUT
        echo pyodc="${{ inputs.pyodc }}" >> $GITHUB_OUTPUT
        echo skinnywms="${{ inputs.skinnywms }}" >> $GITHUB_OUTPUT
        echo thermofeel="${{ inputs.thermofeel }}" >> $GITHUB_OUTPUT
        echo troika="${{ inputs.troika }}" >> $GITHUB_OUTPUT
        echo covjsonkit="${{ inputs.covjsonkit }}" >> $GITHUB_OUTPUT
    - name: checkout reusable wfs repo
      uses: actions/checkout@v4
      with:
        repository: ecmwf-actions/downstream-ci
        ref: feature/add_pymultio
    - name: Run setup script
      id: setup
      env:
        TOKEN: ${{ secrets.GH_REPO_READ_TOKEN }}
        CONFIG: |
          atlas:ecmwf/atlas:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.atlas }}
            optional_matrix: null
          atlas-orca:ecmwf/atlas-orca:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.atlas-orca }}
            optional_matrix: null
          cfgrib:ecmwf/cfgrib:
            path: .github/ci-config.yml
            python: true
            master_branch: master
            develop_branch: master
            input: ${{ steps.prepare-inputs.outputs.cfgrib }}
            optional_matrix: null
          earthkit:ecmwf/earthkit:
            path: .github/ci-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit }}
            optional_matrix: null
          earthkit-data:ecmwf/earthkit-data:
            path: .github/ci-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit-data }}
            optional_matrix: null
          earthkit-geo:ecmwf/earthkit-geo:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit-geo }}
            optional_matrix: null
          earthkit-meteo:ecmwf/earthkit-meteo:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit-meteo }}
            optional_matrix: null
          earthkit-regrid:ecmwf/earthkit-regrid:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit-regrid }}
            optional_matrix: null
          earthkit-time:ecmwf/earthkit-time:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.earthkit-time }}
            optional_matrix: null
          anemoi-datasets:ecmwf/anemoi-datasets:
            path: .github/ci-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-datasets }}
            optional_matrix: null
          anemoi-utils:ecmwf/anemoi-utils:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-utils }}
            optional_matrix: null
          anemoi-transform:ecmwf/anemoi-transform:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-transform }}
            optional_matrix: null
          anemoi-graphs:ecmwf/anemoi-graphs:
            path: .github/ci-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-graphs }}
            optional_matrix: null
          anemoi-models:ecmwf/anemoi-models:
            path: .github/ci-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-models }}
            optional_matrix: null
          anemoi-training:ecmwf/anemoi-training:
            path: .github/ci-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-training }}
            optional_matrix: null
          anemoi-inference:ecmwf/anemoi-inference:
            path: .github/ci-config.yml
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.anemoi-inference }}
            optional_matrix: null
          cascade:ecmwf/cascade:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.cascade }}
            optional_matrix: null
          conflator:ecmwf/conflator:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.conflator }}
            optional_matrix: null
          ecbuild:ecmwf/ecbuild:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.ecbuild }}
            optional_matrix: null
          eccodes:ecmwf/eccodes:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.eccodes }}
            optional_matrix: null
          eccodes-python:ecmwf/eccodes-python:
            path: .github/ci-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.eccodes-python }}
            optional_matrix: null
          ecflow:ecmwf/ecflow:
            path: .github/ci-config.yml
            python: false
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.ecflow }}
            optional_matrix:
            - clang@macos-13-arm
            - clang@macos-13-x86
            - gnu@debian-12
          ecflow-light:ecmwf/ecflow-light:
            path: .github/ci-config.yml
            python: false
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.ecflow-light }}
            optional_matrix: null
          eckit:ecmwf/eckit:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.eckit }}
            optional_matrix: null
          fckit:ecmwf/fckit:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.fckit }}
            optional_matrix: null
          fdb:ecmwf/fdb:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.fdb }}
            optional_matrix: null
          findlibs:ecmwf/findlibs:
            path: ''
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.findlibs }}
            optional_matrix: null
          gribjump:ecmwf/gribjump:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.gribjump }}
            optional_matrix: null
          pygribjump:ecmwf/gribjump:
            path: .github/ci-config-pygribjump.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.pygribjump }}
            optional_matrix: null
          infero:ecmwf/infero:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.infero }}
            optional_matrix: null
          kronos:ecmwf/kronos:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.kronos }}
            optional_matrix: null
          metkit:ecmwf/metkit:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.metkit }}
            optional_matrix: null
          mir:ecmwf/mir:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.mir }}
            optional_matrix: null
          multio:ecmwf/multio:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.multio }}
            optional_matrix: null
          pymultio:ecmwf/multio/pymultio:
            path: .github/ci-config-pymultio.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.pymultio }}
            optional_matrix: null
          multiurl:ecmwf/multiurl:
            path: ''
            python: true
            master_branch: main
            develop_branch: main
            input: ${{ steps.prepare-inputs.outputs.multiurl }}
            optional_matrix: null
          odc:ecmwf/odc:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.odc }}
            optional_matrix: null
          pdbufr:ecmwf/pdbufr:
            path: .github/ci-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.pdbufr }}
            optional_matrix: null
          plume:ecmwf/plume:
            path: .github/ci-config.yml
            python: false
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.plume }}
            optional_matrix: null
          pyfdb:ecmwf/pyfdb:
            path: .github/ci-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.pyfdb }}
            optional_matrix: null
          pyodc:ecmwf/pyodc:
            path: .github/ci-config.yml
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.pyodc }}
            optional_matrix: null
          skinnywms:ecmwf/skinnywms:
            path: ''
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.skinnywms }}
            optional_matrix: null
          thermofeel:ecmwf/thermofeel:
            path: ''
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.thermofeel }}
            optional_matrix: null
          troika:ecmwf/troika:
            path: ''
            python: true
            master_branch: master
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.troika }}
            optional_matrix: null
          covjsonkit:ecmwf/covjsonkit:
            path: ''
            python: true
            master_branch: main
            develop_branch: develop
            input: ${{ steps.prepare-inputs.outputs.covjsonkit }}
            optional_matrix: null
        PYTHON_VERSIONS: |+
          - '3.10'

        PYTHON_JOBS: |+
          []

        MATRIX: |
          include:
          - compiler: gnu
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            labels:
            - self-hosted
            - platform-builder-debian-11
            name: gnu@debian-11
            os: debian-11
          - compiler: gnu
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            labels:
            - self-hosted
            - platform-builder-rocky-8.6
            name: gnu@rocky-8.6
            os: rocky-8.6
          - compiler: clang
            compiler_cc: clang
            compiler_cxx: clang++
            compiler_fc: gfortran
            labels:
            - self-hosted
            - platform-builder-rocky-8.6
            name: clang@rocky-8.6
            os: rocky-8.6
            toolchain_file: /opt/actions-runner/files/toolchain-clang-rocky-8.6.cmake
          - compiler: gnu
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            labels:
            - self-hosted
            - platform-builder-ubuntu-22.04
            name: gnu@ubuntu-22.04
            os: ubuntu-22.04
          - compiler: gnu
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            labels:
            - self-hosted
            - platform-builder-fedora-37
            name: gnu@fedora-37
            os: fedora-37
          name:
          - gnu@debian-11
          - gnu@rocky-8.6
          - clang@rocky-8.6
          - gnu@ubuntu-22.04
          - gnu@fedora-37
        OPTIONAL_MATRIX: |
          include:
          - compiler: gnu
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            labels:
            - self-hosted
            - platform-builder-debian-12
            name: gnu@debian-12
            os: debian-12
          - compiler: clang
            compiler_cc: clang
            compiler_cxx: clang++
            compiler_fc: gfortran
            env: |
              BOOST_ROOT_DIR=$(brew --prefix)
              BOOST_INCLUDE_DIR=$(brew --prefix)/include
              BOOST_LIB_DIR=$(brew --prefix)/lib
            labels:
            - self-hosted
            - platform-builder-macosx-13.4.1-arm64
            name: clang@macos-13-arm
            os: macos-13-arm
          - compiler: clang
            compiler_cc: clang
            compiler_cxx: clang++
            compiler_fc: gfortran
            env: |
              BOOST_ROOT_DIR=$(brew --prefix)
              BOOST_INCLUDE_DIR=$(brew --prefix)/include
              BOOST_LIB_DIR=$(brew --prefix)/lib
            labels:
            - self-hosted
            - platform-builder-macosx-13.4.1-x86_64
            name: clang@macos-13-x86
            os: macos-13-x86
          name:
          - gnu@debian-12
          - clang@macos-13-arm
          - clang@macos-13-x86
        WORKFLOW_NAME: downstream-ci
        DOWNSTREAM_CI_GROUP: ${{ inputs.ci_group }}
        SKIP_MATRIX_JOBS: ${{ inputs.skip_matrix_jobs }}
      run: python setup_downstream_ci.py
  python-qa:
    name: python-qa
    needs:
    - setup
    if: ${{ inputs.python_qa }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install black flake8 isort
    - name: Check isort
      run: isort --check . --profile black
    - name: Check black
      run: black --check .
    - name: Check flake8
      run: flake8 .
  clang-format:
    name: clang-format
    needs:
    - setup
    if: ${{ inputs.clang_format }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install clang-format
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main
        sudo apt update
        sudo apt install -y clang-format-16
    - name: Run clang-format
      shell: bash {0}
      run: |-
        ignore="./\($(echo "${{ inputs.clang_format_ignore }}" | sed ':a;N;$!ba;s/\n/\\|/g')\)"
        echo "Ignore: $ignore"
        files=$(find . -not \( -regex $ignore -prune \) -regex ".*\.\(cpp\|hpp\|cc\|cxx\|h\|c\)")
        errors=0

        if [ ! -e ".clang-format" ]
        then
            echo "::error::Missing .clang-format file"
            exit 1
        fi

        for file in $files; do
            clang-format-16 --dry-run --Werror --style=file --fallback-style=none $file
            if [ $? -ne 0 ]; then
                ((errors++))
            fi
        done

        if [ $errors -ne 0 ]; then
            echo "::error::clang-format failed for $errors files"
            exit 1
        fi
  atlas:
    name: atlas
    needs:
    - fckit
    - eckit
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.atlas_matrix && (needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.atlas)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'atlas') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.atlas_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  atlas-orca:
    name: atlas-orca
    needs:
    - atlas
    - fckit
    - eckit
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.atlas-orca_matrix && (needs.setup.outputs.atlas || needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.atlas-orca)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'atlas-orca') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.atlas-orca_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.atlas }}
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  cfgrib:
    name: cfgrib
    needs:
    - eccodes-python
    - eccodes
    - ecbuild
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.cfgrib_matrix && (needs.setup.outputs.eccodes-python || needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.cfgrib)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'cfgrib') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.cfgrib_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        bin_paths: ${{ steps.build-deps.outputs.bin_paths }}
        python_dependencies: ${{ needs.setup.outputs.eccodes-python || (needs.setup.outputs.use_master == 'True' && 'eccodes-python:ecmwf/eccodes-python@master') || 'eccodes-python:ecmwf/eccodes-python@develop' }}
        requirements_path: ci/requirements-tests.in
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  earthkit:
    name: earthkit
    needs:
    - earthkit-data
    - cfgrib
    - multiurl
    - pdbufr
    - eccodes-python
    - eccodes
    - pyodc
    - odc
    - eckit
    - ecbuild
    - earthkit-geo
    - earthkit-meteo
    - earthkit-regrid
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit_matrix && (needs.setup.outputs.earthkit-data || needs.setup.outputs.cfgrib || needs.setup.outputs.multiurl || needs.setup.outputs.pdbufr || needs.setup.outputs.eccodes-python || needs.setup.outputs.eccodes || needs.setup.outputs.pyodc || needs.setup.outputs.odc || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.earthkit-geo || needs.setup.outputs.earthkit-meteo || needs.setup.outputs.earthkit-regrid || needs.setup.outputs.earthkit)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'earthkit') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.odc }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        bin_paths: ${{ steps.build-deps.outputs.bin_paths }}
        python_dependencies: |-
          ${{ needs.setup.outputs.earthkit-data || (needs.setup.outputs.use_master == 'True' && 'earthkit-data:ecmwf/earthkit-data@main') || 'earthkit-data:ecmwf/earthkit-data@develop' }}
          ${{ needs.setup.outputs.cfgrib || (needs.setup.outputs.use_master == 'True' && 'cfgrib:ecmwf/cfgrib@master') || 'cfgrib:ecmwf/cfgrib@master' }}
          ${{ needs.setup.outputs.multiurl || (needs.setup.outputs.use_master == 'True' && 'multiurl:ecmwf/multiurl@main') || 'multiurl:ecmwf/multiurl@main' }}
          ${{ needs.setup.outputs.pdbufr || (needs.setup.outputs.use_master == 'True' && 'pdbufr:ecmwf/pdbufr@master') || 'pdbufr:ecmwf/pdbufr@develop' }}
          ${{ needs.setup.outputs.eccodes-python || (needs.setup.outputs.use_master == 'True' && 'eccodes-python:ecmwf/eccodes-python@master') || 'eccodes-python:ecmwf/eccodes-python@develop' }}
          ${{ needs.setup.outputs.pyodc || (needs.setup.outputs.use_master == 'True' && 'pyodc:ecmwf/pyodc@master') || 'pyodc:ecmwf/pyodc@develop' }}
          ${{ needs.setup.outputs.earthkit-geo || (needs.setup.outputs.use_master == 'True' && 'earthkit-geo:ecmwf/earthkit-geo@main') || 'earthkit-geo:ecmwf/earthkit-geo@develop' }}
          ${{ needs.setup.outputs.earthkit-meteo || (needs.setup.outputs.use_master == 'True' && 'earthkit-meteo:ecmwf/earthkit-meteo@main') || 'earthkit-meteo:ecmwf/earthkit-meteo@develop' }}
          ${{ needs.setup.outputs.earthkit-regrid || (needs.setup.outputs.use_master == 'True' && 'earthkit-regrid:ecmwf/earthkit-regrid@main') || 'earthkit-regrid:ecmwf/earthkit-regrid@develop' }}
        requirements_path: tests/downstream-ci-requirements.txt
        test_cmd: '_EKD_DIR=$(pwd) && cd .. && python -m pytest ${_EKD_DIR} -vv --cov=. --cov-report=html && cd -

          '
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  earthkit-data:
    name: earthkit-data
    needs:
    - cfgrib
    - multiurl
    - pdbufr
    - eccodes-python
    - eccodes
    - pyodc
    - odc
    - eckit
    - ecbuild
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-data_matrix && (needs.setup.outputs.cfgrib || needs.setup.outputs.multiurl || needs.setup.outputs.pdbufr || needs.setup.outputs.eccodes-python || needs.setup.outputs.eccodes || needs.setup.outputs.pyodc || needs.setup.outputs.odc || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.earthkit-data)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'earthkit-data') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-data_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.odc }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        bin_paths: ${{ steps.build-deps.outputs.bin_paths }}
        python_dependencies: |-
          ${{ needs.setup.outputs.cfgrib || (needs.setup.outputs.use_master == 'True' && 'cfgrib:ecmwf/cfgrib@master') || 'cfgrib:ecmwf/cfgrib@master' }}
          ${{ needs.setup.outputs.multiurl || (needs.setup.outputs.use_master == 'True' && 'multiurl:ecmwf/multiurl@main') || 'multiurl:ecmwf/multiurl@main' }}
          ${{ needs.setup.outputs.pdbufr || (needs.setup.outputs.use_master == 'True' && 'pdbufr:ecmwf/pdbufr@master') || 'pdbufr:ecmwf/pdbufr@develop' }}
          ${{ needs.setup.outputs.eccodes-python || (needs.setup.outputs.use_master == 'True' && 'eccodes-python:ecmwf/eccodes-python@master') || 'eccodes-python:ecmwf/eccodes-python@develop' }}
          ${{ needs.setup.outputs.pyodc || (needs.setup.outputs.use_master == 'True' && 'pyodc:ecmwf/pyodc@master') || 'pyodc:ecmwf/pyodc@develop' }}
        toml_opt_dep_sections: all,test,ci
        test_cmd: |
          python -m pytest -vv -m 'not notebook and not no_cache_init' --cov=. --cov-report=xml
          python -m pytest -v -m 'notebook'
          python -m pytest --forked -vv -m 'no_cache_init'
          python -m coverage report
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  earthkit-geo:
    name: earthkit-geo
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-geo_matrix && (needs.setup.outputs.earthkit-geo)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'earthkit-geo') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-geo_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        requirements_path: tests/downstream-ci-requirements.txt
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  earthkit-meteo:
    name: earthkit-meteo
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-meteo_matrix && (needs.setup.outputs.earthkit-meteo)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'earthkit-meteo') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-meteo_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        requirements_path: tests/downstream-ci-requirements.txt
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  earthkit-regrid:
    name: earthkit-regrid
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-regrid_matrix && (needs.setup.outputs.earthkit-regrid)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'earthkit-regrid') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-regrid_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        requirements_path: tests/downstream-ci-requirements.txt
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  earthkit-time:
    name: earthkit-time
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-time_matrix && (needs.setup.outputs.earthkit-time)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'earthkit-time') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-time_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        test_cmd: |
          python -m pytest --cov=./ --cov-report=xml
          python -m coverage report
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  anemoi-datasets:
    name: anemoi-datasets
    needs:
    - anemoi-utils
    - anemoi-transform
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-datasets_matrix && (needs.setup.outputs.anemoi-utils || needs.setup.outputs.anemoi-transform || needs.setup.outputs.anemoi-datasets)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'anemoi-datasets') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-datasets_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
      RUNNER_TYPE: self-hosted
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: |-
          ${{ needs.setup.outputs.anemoi-utils || (needs.setup.outputs.use_master == 'True' && 'anemoi-utils:ecmwf/anemoi-utils@main') || 'anemoi-utils:ecmwf/anemoi-utils@develop' }}
          ${{ needs.setup.outputs.anemoi-transform || (needs.setup.outputs.use_master == 'True' && 'anemoi-transform:ecmwf/anemoi-transform@main') || 'anemoi-transform:ecmwf/anemoi-transform@develop' }}
        toml_opt_dep_sections: all,tests
        test_cmd: |
          python -m pytest -vv -m 'not notebook and not no_cache_init' --cov=. --cov-report=xml
          python -m coverage report
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  anemoi-utils:
    name: anemoi-utils
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-utils_matrix && (needs.setup.outputs.anemoi-utils)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'anemoi-utils') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-utils_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        toml_opt_dep_sections: all,tests
        test_cmd: |
          python -m pytest -vv -m 'not notebook and not no_cache_init' --cov=. --cov-report=xml
          python -m coverage report
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  anemoi-transform:
    name: anemoi-transform
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-transform_matrix && (needs.setup.outputs.anemoi-transform)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'anemoi-transform') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-transform_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        toml_opt_dep_sections: all,tests
        test_cmd: |
          python -m pytest -vv -m 'not notebook and not no_cache_init' --cov=. --cov-report=xml
          python -m coverage report
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  anemoi-graphs:
    name: anemoi-graphs
    needs:
    - anemoi-datasets
    - anemoi-transform
    - anemoi-utils
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-graphs_matrix && (needs.setup.outputs.anemoi-datasets || needs.setup.outputs.anemoi-transform || needs.setup.outputs.anemoi-utils || needs.setup.outputs.anemoi-graphs)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'anemoi-graphs') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-graphs_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: |-
          ${{ needs.setup.outputs.anemoi-datasets || (needs.setup.outputs.use_master == 'True' && 'anemoi-datasets:ecmwf/anemoi-datasets@main') || 'anemoi-datasets:ecmwf/anemoi-datasets@develop' }}
          ${{ needs.setup.outputs.anemoi-transform || (needs.setup.outputs.use_master == 'True' && 'anemoi-transform:ecmwf/anemoi-transform@main') || 'anemoi-transform:ecmwf/anemoi-transform@develop' }}
          ${{ needs.setup.outputs.anemoi-utils || (needs.setup.outputs.use_master == 'True' && 'anemoi-utils:ecmwf/anemoi-utils@main') || 'anemoi-utils:ecmwf/anemoi-utils@develop' }}
        toml_opt_dep_sections: all,tests
        test_cmd: |
          python -m pytest -vv -m 'not notebook and not no_cache_init' --cov=. --cov-report=xml
          python -m coverage report
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  anemoi-models:
    name: anemoi-models
    needs:
    - anemoi-utils
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-models_matrix && (needs.setup.outputs.anemoi-utils || needs.setup.outputs.anemoi-models)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'anemoi-models') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-models_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ${{ needs.setup.outputs.anemoi-utils || (needs.setup.outputs.use_master == 'True' && 'anemoi-utils:ecmwf/anemoi-utils@main') || 'anemoi-utils:ecmwf/anemoi-utils@develop' }}
        toml_opt_dep_sections: all,tests
        test_cmd: |
          python -m pytest -vv -m 'not notebook and not no_cache_init' --cov=. --cov-report=xml
          python -m coverage report
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  anemoi-training:
    name: anemoi-training
    needs:
    - anemoi-models
    - anemoi-graphs
    - anemoi-datasets
    - anemoi-utils
    - anemoi-transform
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-training_matrix && (needs.setup.outputs.anemoi-models || needs.setup.outputs.anemoi-graphs || needs.setup.outputs.anemoi-datasets || needs.setup.outputs.anemoi-utils || needs.setup.outputs.anemoi-transform || needs.setup.outputs.anemoi-training)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'anemoi-training') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-training_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: |-
          ${{ needs.setup.outputs.anemoi-models || (needs.setup.outputs.use_master == 'True' && 'anemoi-models:ecmwf/anemoi-models@main') || 'anemoi-models:ecmwf/anemoi-models@develop' }}
          ${{ needs.setup.outputs.anemoi-graphs || (needs.setup.outputs.use_master == 'True' && 'anemoi-graphs:ecmwf/anemoi-graphs@main') || 'anemoi-graphs:ecmwf/anemoi-graphs@develop' }}
          ${{ needs.setup.outputs.anemoi-datasets || (needs.setup.outputs.use_master == 'True' && 'anemoi-datasets:ecmwf/anemoi-datasets@main') || 'anemoi-datasets:ecmwf/anemoi-datasets@develop' }}
          ${{ needs.setup.outputs.anemoi-utils || (needs.setup.outputs.use_master == 'True' && 'anemoi-utils:ecmwf/anemoi-utils@main') || 'anemoi-utils:ecmwf/anemoi-utils@develop' }}
          ${{ needs.setup.outputs.anemoi-transform || (needs.setup.outputs.use_master == 'True' && 'anemoi-transform:ecmwf/anemoi-transform@main') || 'anemoi-transform:ecmwf/anemoi-transform@develop' }}
        toml_opt_dep_sections: all,tests
        test_cmd: |
          python -m pytest -vv -m 'not notebook and not no_cache_init' --cov=. --cov-report=xml
          python -m coverage report
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  anemoi-inference:
    name: anemoi-inference
    needs:
    - anemoi-utils
    - anemoi-transform
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.anemoi-inference_matrix && (needs.setup.outputs.anemoi-utils || needs.setup.outputs.anemoi-transform || needs.setup.outputs.anemoi-inference)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'anemoi-inference') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.anemoi-inference_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: |-
          ${{ needs.setup.outputs.anemoi-utils || (needs.setup.outputs.use_master == 'True' && 'anemoi-utils:ecmwf/anemoi-utils@main') || 'anemoi-utils:ecmwf/anemoi-utils@develop' }}
          ${{ needs.setup.outputs.anemoi-transform || (needs.setup.outputs.use_master == 'True' && 'anemoi-transform:ecmwf/anemoi-transform@main') || 'anemoi-transform:ecmwf/anemoi-transform@develop' }}
        toml_opt_dep_sections: all,tests
        test_cmd: |
          python -m pytest -vv -m 'not notebook and not no_cache_init' --cov=. --cov-report=xml
          python -m coverage report
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  cascade:
    name: cascade
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.cascade_matrix && (needs.setup.outputs.cascade)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'cascade') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.cascade_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  conflator:
    name: conflator
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.conflator_matrix && (needs.setup.outputs.conflator)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'conflator') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.conflator_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  ecbuild:
    name: ecbuild
    needs:
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.ecbuild_matrix && (needs.setup.outputs.ecbuild)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'ecbuild') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecbuild_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ''
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  eccodes:
    name: eccodes
    needs:
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eccodes_matrix && (needs.setup.outputs.ecbuild || needs.setup.outputs.eccodes)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'eccodes') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  eccodes-python:
    name: eccodes-python
    needs:
    - eccodes
    - ecbuild
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eccodes-python_matrix && (needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.eccodes-python)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'eccodes-python') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes-python_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
      ECCODES_PYTHON_TRACE_LIB_SEARCH: 1
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        bin_paths: ${{ steps.build-deps.outputs.bin_paths }}
        python_dependencies: ''
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  ecflow:
    name: ecflow
    needs:
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.ecflow_matrix && (needs.setup.outputs.ecbuild || needs.setup.outputs.ecflow)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'ecflow') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  ecflow-light:
    name: ecflow-light
    needs:
    - eckit
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.ecflow-light_matrix && (needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.ecflow-light)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'ecflow-light') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow-light_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  eckit:
    name: eckit
    needs:
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eckit_matrix && (needs.setup.outputs.ecbuild || needs.setup.outputs.eckit)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'eckit') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eckit_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  fckit:
    name: fckit
    needs:
    - eckit
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fckit_matrix && (needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.fckit)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'fckit') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fckit_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  fdb:
    name: fdb
    needs:
    - metkit
    - eccodes
    - eckit
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fdb_matrix && (needs.setup.outputs.metkit || needs.setup.outputs.eccodes || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.fdb)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'fdb') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fdb_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.metkit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  findlibs:
    name: findlibs
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.findlibs_matrix && (needs.setup.outputs.findlibs)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'findlibs') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.findlibs_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        requirements_path: tests/downstream-ci-requirements.txt
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  gribjump:
    name: gribjump
    needs:
    - fdb
    - metkit
    - eccodes
    - eckit
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.gribjump_matrix && (needs.setup.outputs.fdb || needs.setup.outputs.metkit || needs.setup.outputs.eccodes || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.gribjump)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'gribjump') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.gribjump_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.fdb }}
          ${{ needs.setup.outputs.metkit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  pygribjump:
    name: pygribjump
    needs:
    - gribjump
    - fdb
    - metkit
    - eccodes
    - eckit
    - ecbuild
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pygribjump_matrix && (needs.setup.outputs.gribjump || needs.setup.outputs.fdb || needs.setup.outputs.metkit || needs.setup.outputs.eccodes || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.pygribjump)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'pygribjump') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pygribjump_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.gribjump }}
          ${{ needs.setup.outputs.fdb }}
          ${{ needs.setup.outputs.metkit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        bin_paths: ${{ steps.build-deps.outputs.bin_paths }}
        python_dependencies: ''
        toml_opt_dep_sections: dev
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  infero:
    name: infero
    needs:
    - fckit
    - eckit
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.infero_matrix && (needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.infero)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'infero') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.infero_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  kronos:
    name: kronos
    needs:
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.kronos_matrix && (needs.setup.outputs.ecbuild || needs.setup.outputs.kronos)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'kronos') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.kronos_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  metkit:
    name: metkit
    needs:
    - eccodes
    - eckit
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.metkit_matrix && (needs.setup.outputs.eccodes || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.metkit)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'metkit') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.metkit_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  mir:
    name: mir
    needs:
    - atlas
    - fckit
    - eckit
    - eccodes
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.mir_matrix && (needs.setup.outputs.atlas || needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.mir)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'mir') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.mir_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.atlas }}
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  multio:
    name: multio
    needs:
    - atlas-orca
    - fdb
    - metkit
    - mir
    - atlas
    - fckit
    - eckit
    - eccodes
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.multio_matrix && (needs.setup.outputs.atlas-orca || needs.setup.outputs.fdb || needs.setup.outputs.metkit || needs.setup.outputs.mir || needs.setup.outputs.atlas || needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.multio)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'multio') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.multio_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
      CTEST_PARALLEL_LEVEL: 1
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.atlas-orca }}
          ${{ needs.setup.outputs.fdb }}
          ${{ needs.setup.outputs.metkit }}
          ${{ needs.setup.outputs.mir }}
          ${{ needs.setup.outputs.atlas }}
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  pymultio:
    name: pymultio
    needs:
    - multio
    - atlas-orca
    - fdb
    - metkit
    - mir
    - atlas
    - fckit
    - eckit
    - eccodes
    - ecbuild
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pymultio_matrix && (needs.setup.outputs.multio || needs.setup.outputs.atlas-orca || needs.setup.outputs.fdb || needs.setup.outputs.metkit || needs.setup.outputs.mir || needs.setup.outputs.atlas || needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.pymultio)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'pymultio') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pymultio_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.multio }}
          ${{ needs.setup.outputs.atlas-orca }}
          ${{ needs.setup.outputs.fdb }}
          ${{ needs.setup.outputs.metkit }}
          ${{ needs.setup.outputs.mir }}
          ${{ needs.setup.outputs.atlas }}
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        bin_paths: ${{ steps.build-deps.outputs.bin_paths }}
        python_dependencies: ''
        toml_opt_dep_sections: dev
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  multiurl:
    name: multiurl
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.multiurl_matrix && (needs.setup.outputs.multiurl)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'multiurl') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.multiurl_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  odc:
    name: odc
    needs:
    - eckit
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.odc_matrix && (needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.odc)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'odc') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.odc_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  pdbufr:
    name: pdbufr
    needs:
    - eccodes-python
    - eccodes
    - ecbuild
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pdbufr_matrix && (needs.setup.outputs.eccodes-python || needs.setup.outputs.eccodes || needs.setup.outputs.ecbuild || needs.setup.outputs.pdbufr)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'pdbufr') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pdbufr_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.ecbuild }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        bin_paths: ${{ steps.build-deps.outputs.bin_paths }}
        python_dependencies: ${{ needs.setup.outputs.eccodes-python || (needs.setup.outputs.use_master == 'True' && 'eccodes-python:ecmwf/eccodes-python@master') || 'eccodes-python:ecmwf/eccodes-python@develop' }}
        requirements_path: tests/downstream-ci-requirements.txt
        test_cmd: |
          python -m pytest --cov=./ --cov-report=xml -k 'not test_notebooks'
          python -m pytest -v -k 'test_notebooks'
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  plume:
    name: plume
    needs:
    - atlas
    - fckit
    - eckit
    - ecbuild
    - setup
    - clang-format
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.plume_matrix && (needs.setup.outputs.atlas || needs.setup.outputs.fckit || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.plume)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'plume') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.plume_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.atlas }}
          ${{ needs.setup.outputs.fckit }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload }}
  pyfdb:
    name: pyfdb
    needs:
    - fdb
    - metkit
    - eccodes
    - eckit
    - ecbuild
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyfdb_matrix && (needs.setup.outputs.fdb || needs.setup.outputs.metkit || needs.setup.outputs.eccodes || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.pyfdb)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'pyfdb') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyfdb_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
      FDB5_CONFIG: '{"type":"local","engine":"toc","schema":"${{ github.workspace }}/tests/default_fdb_schema","spaces":[{"handler":"Default","roots":[{"path":"${{ github.workspace }}/data/fdb"}]}]}

        '
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.fdb }}
          ${{ needs.setup.outputs.metkit }}
          ${{ needs.setup.outputs.eccodes }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
    - run: mkdir -p data/fdb
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        bin_paths: ${{ steps.build-deps.outputs.bin_paths }}
        python_dependencies: ''
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  pyodc:
    name: pyodc
    needs:
    - odc
    - eckit
    - ecbuild
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyodc_matrix && (needs.setup.outputs.odc || needs.setup.outputs.eckit || needs.setup.outputs.ecbuild || needs.setup.outputs.pyodc)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'pyodc') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyodc_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - name: Build dependencies
      id: build-deps
      uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        codecov_upload: false
        build_package_inputs: 'repository: ${{ matrix.owner_repo_ref }}'
        build_config: ${{ matrix.config_path }}
        build_dependencies: |-
          ${{ needs.setup.outputs.odc }}
          ${{ needs.setup.outputs.eckit }}
          ${{ needs.setup.outputs.ecbuild }}
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        lib_path: ${{ steps.build-deps.outputs.lib_path }}
        bin_paths: ${{ steps.build-deps.outputs.bin_paths }}
        python_dependencies: ''
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  skinnywms:
    name: skinnywms
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.skinnywms_matrix && (needs.setup.outputs.skinnywms)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'skinnywms') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.skinnywms_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  thermofeel:
    name: thermofeel
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.thermofeel_matrix && (needs.setup.outputs.thermofeel)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'thermofeel') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.thermofeel_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  troika:
    name: troika
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.troika_matrix && (needs.setup.outputs.troika)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'troika') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.troika_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        test_cmd: |
          pytest --cov=./ --cov-report=xml --basetemp=$RUNNER_TEMP/pytest_tmp
          python -m coverage report
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
  covjsonkit:
    name: covjsonkit
    needs:
    - setup
    - python-qa
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.covjsonkit_matrix && (needs.setup.outputs.covjsonkit)&& contains(fromJson(needs.setup.outputs.ci_group_pkgs), 'covjsonkit') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.covjsonkit_matrix) }}
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    runs-on: ${{ matrix.labels }}
    steps:
    - uses: ecmwf-actions/reusable-workflows/ci-python@v2
      with:
        repository: ${{ matrix.owner_repo_ref }}
        checkout: true
        python_dependencies: ''
        codecov_upload: ${{ contains(needs.setup.outputs.trigger_pkgs, github.job) && inputs.codecov_upload && needs.setup.outputs.py_codecov_platform == matrix.name }}
        codecov_token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
